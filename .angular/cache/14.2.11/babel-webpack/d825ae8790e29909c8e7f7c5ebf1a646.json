{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, isDevMode, InjectionToken, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * IDs are deliminated by an empty space, as per the spec.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  const ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  const ids = getAriaReferenceIds(el, attr);\n  /** @type {?} */\n\n  const filteredIds = ids.filter(val => val != id.trim());\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * ID used for the body container where all messages are appended.\n * @type {?}\n */\n\n\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @type {?}\n */\n\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @type {?}\n */\n\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/**\n * Global incremental identifier for each registered message element.\n * @type {?}\n */\n\nlet nextId = 0;\n/**\n * Global map of all registered message elements that have been placed into the document.\n * @type {?}\n */\n\nconst messageRegistry = new Map();\n/**\n * Container for all registered messages.\n * @type {?}\n */\n\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * \\@docs-private\n */\n\nclass AriaDescriber {\n  /**\n   * @param {?} _document\n   */\n  constructor(_document) {\n    this._document = _document;\n  }\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   * @param {?} hostElement\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  describe(hostElement, message) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (!messageRegistry.has(message)) {\n      this._createMessageElement(message);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\n      this._addMessageReference(hostElement, message);\n    }\n  }\n  /**\n   * Removes the host element's aria-describedby reference to the message element.\n   * @param {?} hostElement\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  removeDescription(hostElement, message) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (this._isElementDescribedByMessage(hostElement, message)) {\n      this._removeMessageReference(hostElement, message);\n    }\n    /** @type {?} */\n\n\n    const registeredMessage = messageRegistry.get(message);\n\n    if (registeredMessage && registeredMessage.referenceCount === 0) {\n      this._deleteMessageElement(message);\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n  /**\n   * Unregisters all created message elements and removes the message container.\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    /** @type {?} */\n    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   * @private\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _createMessageElement(message) {\n    /** @type {?} */\n    const messageElement = this._document.createElement('div');\n\n    messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n    messageElement.appendChild(\n    /** @type {?} */\n    this._document.createTextNode(message));\n\n    this._createMessagesContainer();\n\n    /** @type {?} */\n    messagesContainer.appendChild(messageElement);\n    messageRegistry.set(message, {\n      messageElement,\n      referenceCount: 0\n    });\n  }\n  /**\n   * Deletes the message element from the global messages container.\n   * @private\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _deleteMessageElement(message) {\n    /** @type {?} */\n    const registeredMessage = messageRegistry.get(message);\n    /** @type {?} */\n\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n\n    messageRegistry.delete(message);\n  }\n  /**\n   * Creates the global container for all aria-describedby messages.\n   * @private\n   * @return {?}\n   */\n\n\n  _createMessagesContainer() {\n    if (!messagesContainer) {\n      /** @type {?} */\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n\n\n      if (preExistingContainer) {\n        /** @type {?} */\n        preExistingContainer.parentNode.removeChild(preExistingContainer);\n      }\n\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\n      messagesContainer.setAttribute('aria-hidden', 'true');\n      messagesContainer.style.display = 'none';\n\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n  /**\n   * Deletes the global messages container.\n   * @private\n   * @return {?}\n   */\n\n\n  _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n  /**\n   * Removes all cdk-describedby messages that are hosted through the element.\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _removeCdkDescribedByReferenceIds(element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n\n    /** @type {?} */\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   * @private\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _addMessageReference(element, message) {\n    /** @type {?} */\n    const registeredMessage =\n    /** @type {?} */\n    messageRegistry.get(message); // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n    registeredMessage.referenceCount++;\n  }\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   * @private\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _removeMessageReference(element, message) {\n    /** @type {?} */\n    const registeredMessage =\n    /** @type {?} */\n    messageRegistry.get(message);\n    registeredMessage.referenceCount--;\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n  /**\n   * Returns true if the element has been described by the provided message ID.\n   * @private\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _isElementDescribedByMessage(element, message) {\n    /** @type {?} */\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    /** @type {?} */\n\n    const registeredMessage = messageRegistry.get(message);\n    /** @type {?} */\n\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n  /**\n   * Determines whether a message can be described on a particular element.\n   * @private\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n\n\n  _canBeDescribed(element, message) {\n    return element.nodeType === this._document.ELEMENT_NODE && message != null && !!`${message}`.trim();\n  }\n\n}\n\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nAriaDescriber.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: AriaDescriber,\n  factory: AriaDescriber.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nAriaDescriber.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\n\n\nAriaDescriber.ngInjectableDef = defineInjectable({\n  factory: function AriaDescriber_Factory() {\n    return new AriaDescriber(inject(DOCUMENT));\n  },\n  token: AriaDescriber,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n  return parentDispatcher || new AriaDescriber(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\n\n\nconst ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [[new Optional(), new SkipSelf(), AriaDescriber],\n  /** @type {?} */\n  DOCUMENT],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\n\nclass ListKeyManager {\n  /**\n   * @param {?} _items\n   */\n  constructor(_items) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn = item => item.disabled; // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /**\n     * Stream that emits whenever the active item of the list manager changes.\n     */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(newItems => {\n        if (this._activeItem) {\n          /** @type {?} */\n          const itemArray = newItems.toArray();\n          /** @type {?} */\n\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} predicate Function that determines whether the given item should be skipped.\n   * @return {THIS}\n   */\n\n\n  skipPredicate(predicate) {\n    /** @type {?} */\n    this._skipPredicateFn = predicate;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n   * @return {THIS}\n   */\n\n\n  withWrap(shouldWrap = true) {\n    /** @type {?} */\n    this._wrap = shouldWrap;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} enabled Whether vertical selection should be enabled.\n   * @return {THIS}\n   */\n\n\n  withVerticalOrientation(enabled = true) {\n    /** @type {?} */\n    this._vertical = enabled;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} direction Direction in which the selection can be moved.\n   * @return {THIS}\n   */\n\n\n  withHorizontalOrientation(direction) {\n    /** @type {?} */\n    this._horizontal = direction;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} keys\n   * @return {THIS}\n   */\n\n\n  withAllowedModifierKeys(keys) {\n    /** @type {?} */\n    this._allowedModifierKeys = keys;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n   * @return {THIS}\n   */\n\n\n  withTypeAhead(debounceInterval = 200) {\n    if (\n    /** @type {?} */\n    this._items.length &&\n    /** @type {?} */\n    this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    /** @type {?} */\n    this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n\n\n    /** @type {?} */\n    this._typeaheadSubscription =\n    /** @type {?} */\n    this._letterKeyStream.pipe(tap(keyCode =>\n    /** @type {?} */\n    this._pressedLetters.push(keyCode)), debounceTime(debounceInterval), filter(() =>\n    /** @type {?} */\n    this._pressedLetters.length > 0), map(() =>\n    /** @type {?} */\n    this._pressedLetters.join(''))).subscribe(inputString => {\n      /** @type {?} */\n      const items =\n      /** @type {?} */\n      this._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n\n\n      for (let i = 1; i < items.length + 1; i++) {\n        /** @type {?} */\n        const index = (\n        /** @type {?} */\n        this._activeItemIndex + i) % items.length;\n        /** @type {?} */\n\n        const item = items[index];\n\n        if (!\n        /** @type {?} */\n        this._skipPredicateFn(item) &&\n        /** @type {?} */\n        item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          /** @type {?} */\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      /** @type {?} */\n      this._pressedLetters = [];\n    });\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  setActiveItem(item) {\n    /** @type {?} */\n    const previousIndex = this._activeItemIndex;\n    this.updateActiveItem(item);\n\n    if (this._activeItemIndex !== previousIndex) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param {?} event Keyboard event to be used for determining which element should be active.\n   * @return {?}\n   */\n\n\n  onKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    /** @type {?} */\n\n    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    /** @type {?} */\n\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        } // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n\n\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /**\n   * Index of the currently active item.\n   * @return {?}\n   */\n\n\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /**\n   * The active item.\n   * @return {?}\n   */\n\n\n  get activeItem() {\n    return this._activeItem;\n  }\n  /**\n   * Sets the active item to the first enabled item in the list.\n   * @return {?}\n   */\n\n\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /**\n   * Sets the active item to the last enabled item in the list.\n   * @return {?}\n   */\n\n\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n  /**\n   * Sets the active item to the next enabled item in the list.\n   * @return {?}\n   */\n\n\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /**\n   * Sets the active item to a previous enabled item in the list.\n   * @return {?}\n   */\n\n\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  updateActiveItem(item) {\n    /** @type {?} */\n    const itemArray = this._getItemsArray();\n    /** @type {?} */\n\n\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    /** @type {?} */\n\n    const activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.\n\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n  /**\n   * Allows setting of the activeItemIndex without any other effects.\n   * @deprecated Use `updateActiveItem` instead.\n   * \\@breaking-change 8.0.0\n   * @param {?} index The new activeItemIndex.\n   * @return {?}\n   */\n\n\n  updateActiveItemIndex(index) {\n    this.updateActiveItem(index);\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   * @private\n   * @param {?} delta\n   * @return {?}\n   */\n\n\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   * @private\n   * @param {?} delta\n   * @return {?}\n   */\n\n\n  _setActiveInWrapMode(delta) {\n    /** @type {?} */\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      /** @type {?} */\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      /** @type {?} */\n\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   * @private\n   * @param {?} delta\n   * @return {?}\n   */\n\n\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   * @private\n   * @param {?} index\n   * @param {?} fallbackDelta\n   * @return {?}\n   */\n\n\n  _setActiveItemByIndex(index, fallbackDelta) {\n    /** @type {?} */\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n  /**\n   * Returns the items as an array.\n   * @private\n   * @return {?}\n   */\n\n\n  _getItemsArray() {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} origin Focus origin to be used when focusing items.\n   * @return {THIS}\n   */\n\n\n  setFocusOrigin(origin) {\n    /** @type {?} */\n    this._origin = origin;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  setActiveItem(item) {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n\n\nclass InteractivityChecker {\n  /**\n   * @param {?} _platform\n   */\n  constructor(_platform) {\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is disabled.\n   */\n\n\n  isDisabled(element) {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @param {?} element\n   * @return {?} Whether the element is visible.\n   */\n\n\n  isVisible(element) {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is tabbable.\n   */\n\n\n  isTabbable(element) {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n    /** @type {?} */\n\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      /** @type {?} */\n      const frameType = frameElement && frameElement.nodeName.toLowerCase(); // Frame elements inherit their tabindex onto all child elements.\n\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      } // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n\n\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      } // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n\n\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n    /** @type {?} */\n\n\n    let nodeName = element.nodeName.toLowerCase();\n    /** @type {?} */\n\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    } // In iOS the browser only considers some specific elements as tabbable.\n\n\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is focusable.\n   */\n\n\n  isFocusable(element) {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\n}\n\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nInteractivityChecker.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: InteractivityChecker,\n  factory: InteractivityChecker.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nInteractivityChecker.ctorParameters = () => [{\n  type: Platform\n}];\n/** @nocollapse */\n\n\nInteractivityChecker.ngInjectableDef = defineInjectable({\n  factory: function InteractivityChecker_Factory() {\n    return new InteractivityChecker(inject(Platform));\n  },\n  token: InteractivityChecker,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return (\n      /** @type {?} */\n      window.frameElement\n    );\n  } catch (_a) {\n    return null;\n  }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isNativeFormElement(element) {\n  /** @type {?} */\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  /** @type {?} */\n\n\n  let tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n\n  /** @type {?} */\n\n\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  /** @type {?} */\n  let nodeName = element.nodeName.toLowerCase();\n  /** @type {?} */\n\n  let inputType = nodeName === 'input' &&\n  /** @type {?} */\n  element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\n\n\nclass FocusTrap {\n  /**\n   * @param {?} _element\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?=} deferAnchors\n   */\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n\n    this._startAnchorListener = () => this.focusLastTabbableElement();\n\n    this._endAnchorListener = () => this.focusFirstTabbableElement();\n\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /**\n   * Destroys the focus trap by cleaning up the anchors.\n   * @return {?}\n   */\n\n\n  destroy() {\n    /** @type {?} */\n    const startAnchor = this._startAnchor;\n    /** @type {?} */\n\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this._startAnchorListener);\n\n      if (startAnchor.parentNode) {\n        startAnchor.parentNode.removeChild(startAnchor);\n      }\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this._endAnchorListener);\n\n      if (endAnchor.parentNode) {\n        endAnchor.parentNode.removeChild(endAnchor);\n      }\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n\n\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n\n        /** @type {?} */\n        this._startAnchor.addEventListener('focus', this._startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n\n        /** @type {?} */\n        this._endAnchor.addEventListener('focus', this._endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(\n      /** @type {?} */\n      this._startAnchor, this._element);\n\n      this._element.parentNode.insertBefore(\n      /** @type {?} */\n      this._endAnchor, this._element.nextSibling);\n\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n\n\n  focusInitialElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n\n\n  focusFirstTabbableElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n\n\n  focusLastTabbableElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @private\n   * @param {?} bound The boundary to get (start or end of trapped region).\n   * @return {?} The boundary element.\n   */\n\n\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n\n    /** @type {?} */\n    let markers =\n    /** @type {?} */\n    this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @return {?} Whether focus was moved successfuly.\n   */\n\n\n  focusInitialElement() {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n\n    /** @type {?} */\n    const redirectToElement =\n    /** @type {?} */\n    this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      } // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n\n\n      if (isDevMode() && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @return {?} Whether focus was moved successfuly.\n   */\n\n\n  focusFirstTabbableElement() {\n    /** @type {?} */\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @return {?} Whether focus was moved successfuly.\n   */\n\n\n  focusLastTabbableElement() {\n    /** @type {?} */\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfuly been attached.\n   * @return {?}\n   */\n\n\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /**\n   * Get the first tabbable element from a DOM subtree (inclusive).\n   * @private\n   * @param {?} root\n   * @return {?}\n   */\n\n\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n\n    /** @type {?} */\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      /** @type {?} */\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(\n      /** @type {?} */\n      children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Get the last tabbable element from a DOM subtree (inclusive).\n   * @private\n   * @param {?} root\n   * @return {?}\n   */\n\n\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in reverse DOM order.\n\n    /** @type {?} */\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      /** @type {?} */\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(\n      /** @type {?} */\n      children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Creates an anchor element.\n   * @private\n   * @return {?}\n   */\n\n\n  _createAnchor() {\n    /** @type {?} */\n    const anchor = this._document.createElement('div');\n\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @private\n   * @param {?} isEnabled Whether the focus trap is enabled.\n   * @param {?} anchor Anchor on which to toggle the tabindex.\n   * @return {?}\n   */\n\n\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Executes a function when the zone is stable.\n   * @private\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n    }\n  }\n\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\n\n\nclass FocusTrapFactory {\n  /**\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  constructor(_checker, _ngZone, _document) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param {?} element The element around which focus will be trapped.\n   * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @return {?} The created focus trap instance.\n   */\n\n\n  create(element, deferCaptureElements = false) {\n    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n\n}\n\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFocusTrapFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FocusTrapFactory,\n  factory: FocusTrapFactory.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nFocusTrapFactory.ctorParameters = () => [{\n  type: InteractivityChecker\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\n\n\nFocusTrapFactory.ngInjectableDef = defineInjectable({\n  factory: function FocusTrapFactory_Factory() {\n    return new FocusTrapFactory(inject(InteractivityChecker), inject(NgZone), inject(DOCUMENT));\n  },\n  token: FocusTrapFactory,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Directive for trapping focus within a region.\n */\n\n\nclass CdkTrapFocus {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _document\n   */\n  constructor(_elementRef, _focusTrapFactory, _document) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /**\n     * Previously focused element to restore focus to upon destroy when using autoCapture.\n     */\n\n    this._previouslyFocusedElement = null;\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n\n\n  get enabled() {\n    return this.focusTrap.enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set enabled(value) {\n    this.focusTrap.enabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the directive should automatially move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   * @return {?}\n   */\n\n\n  get autoCapture() {\n    return this._autoCapture;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set autoCapture(value) {\n    this._autoCapture = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n\n      this._previouslyFocusedElement = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._previouslyFocusedElement =\n      /** @type {?} */\n      this._document.activeElement;\n      this.focusTrap.focusInitialElementWhenReady();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n}\n\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n  return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nCdkTrapFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTrapFocus,\n  selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"cdkTrapFocus\"]\n});\n/** @nocollapse */\n\nCdkTrapFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\nCdkTrapFocus.propDecorators = {\n  enabled: [{\n    type: Input,\n    args: ['cdkTrapFocus']\n  }],\n  autoCapture: [{\n    type: Input,\n    args: ['cdkTrapFocusAutoCapture']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTrapFocus]',\n      exportAs: 'cdkTrapFocus'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// The token for the live announcer element is defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\n/** @type {?} */\n\n\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass LiveAnnouncer {\n  /**\n   * @param {?} elementToken\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  constructor(elementToken, _ngZone, _document) {\n    this._ngZone = _ngZone; // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n  /**\n   * @param {?} message\n   * @param {...?} args\n   * @return {?}\n   */\n\n\n  announce(message, ...args) {\n    /** @type {?} */\n    let politeness;\n    /** @type {?} */\n\n    let duration;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout); // TODO: ensure changing the politeness works on all environments we support.\n\n    this._liveElement.setAttribute('aria-live',\n    /** @type {?} */\n    politeness || 'polite'); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        clearTimeout(this._previousTimeout);\n        this._previousTimeout = setTimeout(() => {\n          this._liveElement.textContent = message;\n          resolve();\n\n          if (typeof duration === 'number') {\n            this._previousTimeout = setTimeout(() => this.clear(), duration);\n          }\n        }, 100);\n      });\n    });\n  }\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   * @return {?}\n   */\n\n\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n\n      this._liveElement =\n      /** @type {?} */\n      null;\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _createLiveElement() {\n    /** @type {?} */\n    const elementClass = 'cdk-live-announcer-element';\n    /** @type {?} */\n\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    /** @type {?} */\n\n\n    const liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n    for (let i = 0; i < previousElements.length; i++) {\n      /** @type {?} */\n      previousElements[i].parentNode.removeChild(previousElements[i]);\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n}\n\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nLiveAnnouncer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: LiveAnnouncer,\n  factory: LiveAnnouncer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nLiveAnnouncer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\n\n\nLiveAnnouncer.ngInjectableDef = defineInjectable({\n  factory: function LiveAnnouncer_Factory() {\n    return new LiveAnnouncer(inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), inject(NgZone), inject(DOCUMENT));\n  },\n  token: LiveAnnouncer,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n\n\nclass CdkAriaLive {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _liveAnnouncer\n   * @param {?} _contentObserver\n   * @param {?} _ngZone\n   */\n  constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'off';\n  }\n  /**\n   * The aria-live politeness level to use when announcing messages.\n   * @return {?}\n   */\n\n\n  get politeness() {\n    return this._politeness;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set politeness(value) {\n    this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n\n          /** @type {?} */\n          const elementText = this._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness);\n\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n}\n\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n  return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkAriaLive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAriaLive,\n  selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n  inputs: {\n    politeness: [\"cdkAriaLive\", \"politeness\"]\n  },\n  exportAs: [\"cdkAriaLive\"]\n});\n/** @nocollapse */\n\nCdkAriaLive.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: LiveAnnouncer\n}, {\n  type: ContentObserver\n}, {\n  type: NgZone\n}];\n\nCdkAriaLive.propDecorators = {\n  politeness: [{\n    type: Input,\n    args: ['cdkAriaLive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAriaLive]',\n      exportAs: 'cdkAriaLive'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: ɵngcc2.ContentObserver\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    politeness: [{\n      type: Input,\n      args: ['cdkAriaLive']\n    }]\n  });\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentAnnouncer\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\n\n\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentAnnouncer, liveElement, _document, ngZone) {\n  return parentAnnouncer || new LiveAnnouncer(liveElement, ngZone, _document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\n\n\nconst LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [[new Optional(), new SkipSelf(), LiveAnnouncer], [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)], DOCUMENT, NgZone],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\n\n/** @type {?} */\n\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also\n * mark the the listener as passive if the browser supports it.\n * @type {?}\n */\n\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\n\nclass FocusMonitor {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  constructor(_ngZone, _platform) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * The focus origin that the next focus event is a result of.\n     */\n\n    this._origin = null;\n    /**\n     * Whether the window has just been focused.\n     */\n\n    this._windowFocused = false;\n    /**\n     * Map of elements being monitored to their info.\n     */\n\n    this._elementInfo = new Map();\n    /**\n     * The number of elements currently being monitored.\n     */\n\n    this._monitoredElementCount = 0;\n    /**\n     * Event listener for `keydown` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n    this._documentKeydownListener = () => {\n      // On keydown record the origin and clear any touch event that may be in progress.\n      this._lastTouchTarget = null;\n\n      this._setOriginForCurrentEventQueue('keyboard');\n    };\n    /**\n     * Event listener for `mousedown` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n\n    this._documentMousedownListener = () => {\n      // On mousedown record the origin only if there is not touch\n      // target, since a mousedown can happen as a result of a touch event.\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    };\n    /**\n     * Event listener for `touchstart` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n\n    this._documentTouchstartListener = event => {\n      // When the touchstart event fires the focus event is not yet in the event queue. This means\n      // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n      // see if a focus happens.\n      if (this._touchTimeoutId != null) {\n        clearTimeout(this._touchTimeoutId);\n      }\n\n      this._lastTouchTarget = event.target;\n      this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    };\n    /**\n     * Event listener for `focus` events on the window.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n\n    this._windowFocusListener = () => {\n      // Make a note of when the window regains focus, so we can\n      // restore the origin info for the focused element.\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n    };\n  }\n  /**\n   * @param {?} element\n   * @param {?=} checkChildren\n   * @return {?}\n   */\n\n\n  monitor(element, checkChildren = false) {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return of(null);\n    }\n    /** @type {?} */\n\n\n    const nativeElement = coerceElement(element); // Check if we're already monitoring this element.\n\n    if (this._elementInfo.has(nativeElement)) {\n      /** @type {?} */\n      let cachedInfo = this._elementInfo.get(nativeElement);\n\n      /** @type {?} */\n      cachedInfo.checkChildren = checkChildren;\n      return (\n        /** @type {?} */\n        cachedInfo.subject.asObservable()\n      );\n    } // Create monitored element info.\n\n    /** @type {?} */\n\n\n    let info = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      subject: new Subject()\n    };\n\n    this._elementInfo.set(nativeElement, info);\n\n    this._incrementMonitoredElementCount(); // Start listening. We need to listen in capture phase since focus events don't bubble.\n\n    /** @type {?} */\n\n\n    let focusListener = event => this._onFocus(event, nativeElement);\n    /** @type {?} */\n\n\n    let blurListener = event => this._onBlur(event, nativeElement);\n\n    this._ngZone.runOutsideAngular(() => {\n      nativeElement.addEventListener('focus', focusListener, true);\n      nativeElement.addEventListener('blur', blurListener, true);\n    }); // Create an unlisten function for later.\n\n\n    info.unlisten = () => {\n      nativeElement.removeEventListener('focus', focusListener, true);\n      nativeElement.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n  /**\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  stopMonitoring(element) {\n    /** @type {?} */\n    const nativeElement = coerceElement(element);\n    /** @type {?} */\n\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n\n      this._elementInfo.delete(nativeElement);\n\n      this._decrementMonitoredElementCount();\n    }\n  }\n  /**\n   * @param {?} element\n   * @param {?} origin\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  focusVia(element, origin, options) {\n    /** @type {?} */\n    const nativeElement = coerceElement(element);\n\n    this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server\n\n\n    if (typeof nativeElement.focus === 'function') {\n      // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n\n      /** @type {?} */\n      nativeElement.focus(options);\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @param {?} className\n   * @param {?} shouldSet\n   * @return {?}\n   */\n\n\n  _toggleClass(element, className, shouldSet) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @private\n   * @param {?} element The element to update the classes on.\n   * @param {?=} origin The focus origin.\n   * @return {?}\n   */\n\n\n  _setClasses(element, origin) {\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      this._toggleClass(element, 'cdk-focused', !!origin);\n\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n  }\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * @private\n   * @param {?} origin The origin to set.\n   * @return {?}\n   */\n\n\n  _setOriginForCurrentEventQueue(origin) {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin; // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n      // tick after the interaction event fired. To ensure the focus origin is always correct,\n      // the focus origin will be determined at the beginning of the next tick.\n\n      this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n    });\n  }\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @private\n   * @param {?} event The focus event to check.\n   * @return {?} Whether the event was caused by a touch.\n   */\n\n\n  _wasCausedByTouch(event) {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, 'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n\n    /** @type {?} */\n    let focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n  /**\n   * Handles focus events on a registered element.\n   * @private\n   * @param {?} event The focus event.\n   * @param {?} element The monitored element.\n   * @return {?}\n   */\n\n\n  _onFocus(event, element) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || !elementInfo.checkChildren && element !== event.target) {\n      return;\n    } // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n\n    /** @type {?} */\n\n\n    let origin = this._origin;\n\n    if (!origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        origin = 'touch';\n      } else {\n        origin = 'program';\n      }\n    }\n\n    this._setClasses(element, origin);\n\n    this._emitOrigin(elementInfo.subject, origin);\n\n    this._lastFocusOrigin = origin;\n  }\n  /**\n   * Handles blur events on a registered element.\n   * @param {?} event The blur event.\n   * @param {?} element The monitored element.\n   * @return {?}\n   */\n\n\n  _onBlur(event, element) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n      return;\n    }\n\n    this._setClasses(element);\n\n    this._emitOrigin(elementInfo.subject, null);\n  }\n  /**\n   * @private\n   * @param {?} subject\n   * @param {?} origin\n   * @return {?}\n   */\n\n\n  _emitOrigin(subject, origin) {\n    this._ngZone.run(() => subject.next(origin));\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _incrementMonitoredElementCount() {\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount == 1 && this._platform.isBrowser) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n        document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n        document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _decrementMonitoredElementCount() {\n    // Unregister global listeners when last element is unmonitored.\n    if (! --this._monitoredElementCount) {\n      document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n      document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n      document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n      window.removeEventListener('focus', this._windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n\n}\n\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nFocusMonitor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FocusMonitor,\n  factory: FocusMonitor.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nFocusMonitor.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Platform\n}];\n/** @nocollapse */\n\n\nFocusMonitor.ngInjectableDef = defineInjectable({\n  factory: function FocusMonitor_Factory() {\n    return new FocusMonitor(inject(NgZone), inject(Platform));\n  },\n  token: FocusMonitor,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n\n\nclass CdkMonitorFocus {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusMonitor\n   */\n  constructor(_elementRef, _focusMonitor) {\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this.cdkFocusChange = new EventEmitter();\n    this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    this._monitorSubscription.unsubscribe();\n  }\n\n}\n\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n  return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n};\n\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkMonitorFocus,\n  selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n  outputs: {\n    cdkFocusChange: \"cdkFocusChange\"\n  }\n});\n/** @nocollapse */\n\nCdkMonitorFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}];\n\nCdkMonitorFocus.propDecorators = {\n  cdkFocusChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusMonitor\n    }];\n  }, {\n    cdkFocusChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\n\n\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\n\n\nconst FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\n\nfunction isFakeMousedownFromScreenReader(event) {\n  return event.buttons === 0;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass A11yModule {}\n\nA11yModule.ɵfac = function A11yModule_Factory(t) {\n  return new (t || A11yModule)();\n};\n\nA11yModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: A11yModule\n});\nA11yModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule, PlatformModule, ObserversModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PlatformModule, ObserversModule],\n      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function () {\n      return [CommonModule, PlatformModule, ObserversModule];\n    },\n    exports: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule };","map":{"version":3,"names":["DOCUMENT","CommonModule","Inject","Injectable","Optional","SkipSelf","QueryList","Directive","ElementRef","Input","NgZone","isDevMode","InjectionToken","EventEmitter","Output","NgModule","defineInjectable","inject","Subject","Subscription","of","UP_ARROW","DOWN_ARROW","LEFT_ARROW","RIGHT_ARROW","TAB","A","Z","ZERO","NINE","hasModifierKey","debounceTime","filter","map","tap","take","Platform","normalizePassiveListenerOptions","PlatformModule","coerceBooleanProperty","coerceElement","ContentObserver","ObserversModule","ɵngcc0","ɵngcc1","ɵngcc2","ID_DELIMINATOR","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","removeAriaReferencedId","filteredIds","val","getAttribute","match","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","messageRegistry","Map","messagesContainer","AriaDescriber","constructor","_document","describe","hostElement","message","_canBeDescribed","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_removeMessageReference","registeredMessage","get","referenceCount","_deleteMessageElement","childNodes","length","_deleteMessagesContainer","ngOnDestroy","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","removeAttribute","clear","messageElement","createElement","appendChild","createTextNode","_createMessagesContainer","set","removeChild","delete","preExistingContainer","getElementById","parentNode","style","display","body","element","originalReferenceIds","indexOf","referenceIds","messageId","nodeType","ELEMENT_NODE","ɵfac","AriaDescriber_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","undefined","decorators","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","ARIA_DESCRIBER_PROVIDER_FACTORY","parentDispatcher","ARIA_DESCRIBER_PROVIDER","provide","deps","useFactory","ListKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","EMPTY","_vertical","_allowedModifierKeys","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","itemArray","toArray","newIndex","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","getLabel","Error","unsubscribe","pipe","keyCode","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","previousIndex","updateActiveItem","next","onKeydown","event","modifiers","isModifierAllowed","every","modifier","setNextItemActive","setPreviousItemActive","key","toLocaleUpperCase","String","fromCharCode","preventDefault","activeItemIndex","activeItem","setFirstItemActive","_setActiveItemByIndex","setLastItemActive","_setActiveItemByDelta","updateActiveItemIndex","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","setInactiveStyles","setActiveStyles","FocusKeyManager","arguments","_origin","setFocusOrigin","origin","focus","InteractivityChecker","_platform","isDisabled","hasAttribute","isVisible","hasGeometry","getComputedStyle","visibility","isTabbable","isBrowser","frameElement","getFrameElement","getWindow","frameType","nodeName","toLowerCase","getTabIndexValue","BLINK","WEBKIT","tabIndexValue","TRIDENT","FIREFOX","IOS","isPotentiallyTabbableIOS","tabIndex","isFocusable","isPotentiallyFocusable","InteractivityChecker_Factory","window","_a","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","isNaN","parseInt","inputType","node","ownerDocument","defaultView","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","_startAnchorListener","focusLastTabbableElement","_endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","startAnchor","endAnchor","removeEventListener","runOutsideAngular","_createAnchor","addEventListener","insertBefore","nextSibling","focusInitialElementWhenReady","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","hasAttached","root","children","tabbableChild","anchor","classList","add","isEnabled","fn","isStable","onStable","asObservable","FocusTrapFactory","create","deferCaptureElements","FocusTrapFactory_Factory","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","nativeElement","autoCapture","_autoCapture","ngAfterContentInit","activeElement","ngDoCheck","CdkTrapFocus_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","exportAs","propDecorators","selector","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LiveAnnouncer","elementToken","_liveElement","_createLiveElement","announce","politeness","duration","clearTimeout","_previousTimeout","setTimeout","textContent","elementClass","previousElements","getElementsByClassName","liveEl","LiveAnnouncer_Factory","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","elementText","_previousAnnouncedText","CdkAriaLive_Factory","LIVE_ANNOUNCER_PROVIDER_FACTORY","parentAnnouncer","liveElement","ngZone","LIVE_ANNOUNCER_PROVIDER","TOUCH_BUFFER_MS","captureEventListenerOptions","passive","capture","FocusMonitor","_windowFocused","_elementInfo","_monitoredElementCount","_documentKeydownListener","_lastTouchTarget","_setOriginForCurrentEventQueue","_documentMousedownListener","_documentTouchstartListener","_touchTimeoutId","target","_windowFocusListener","_windowFocusTimeoutId","monitor","checkChildren","cachedInfo","subject","info","unlisten","_incrementMonitoredElementCount","focusListener","_onFocus","blurListener","_onBlur","stopMonitoring","elementInfo","complete","_setClasses","_decrementMonitoredElementCount","focusVia","options","forEach","_info","_toggleClass","className","shouldSet","remove","_originTimeoutId","_wasCausedByTouch","focusTarget","Node","contains","_lastFocusOrigin","_emitOrigin","relatedTarget","run","document","FocusMonitor_Factory","CdkMonitorFocus","_focusMonitor","cdkFocusChange","_monitorSubscription","emit","CdkMonitorFocus_Factory","outputs","FOCUS_MONITOR_PROVIDER_FACTORY","platform","FOCUS_MONITOR_PROVIDER","isFakeMousedownFromScreenReader","buttons","A11yModule","A11yModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/apple/Desktop/zepto/my_project/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/a11y.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, isDevMode, InjectionToken, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, normalizePassiveListenerOptions, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * IDs are deliminated by an empty space, as per the spec.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction addAriaReferencedId(el, attr, id) {\n    /** @type {?} */\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    /** @type {?} */\n    const ids = getAriaReferenceIds(el, attr);\n    /** @type {?} */\n    const filteredIds = ids.filter(val => val != id.trim());\n    el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace deliminated) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * ID used for the body container where all messages are appended.\n * @type {?}\n */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n * @type {?}\n */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n * @type {?}\n */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/**\n * Global incremental identifier for each registered message element.\n * @type {?}\n */\nlet nextId = 0;\n/**\n * Global map of all registered message elements that have been placed into the document.\n * @type {?}\n */\nconst messageRegistry = new Map();\n/**\n * Container for all registered messages.\n * @type {?}\n */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * \\@docs-private\n */\nclass AriaDescriber {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        this._document = _document;\n    }\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n    describe(hostElement, message) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        if (!messageRegistry.has(message)) {\n            this._createMessageElement(message);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, message)) {\n            this._addMessageReference(hostElement, message);\n        }\n    }\n    /**\n     * Removes the host element's aria-describedby reference to the message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n    removeDescription(hostElement, message) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        if (this._isElementDescribedByMessage(hostElement, message)) {\n            this._removeMessageReference(hostElement, message);\n        }\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n            this._deleteMessageElement(message);\n        }\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this._deleteMessagesContainer();\n        }\n    }\n    /**\n     * Unregisters all created message elements and removes the message container.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        if (messagesContainer) {\n            this._deleteMessagesContainer();\n        }\n        messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     * @private\n     * @param {?} message\n     * @return {?}\n     */\n    _createMessageElement(message) {\n        /** @type {?} */\n        const messageElement = this._document.createElement('div');\n        messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n        messageElement.appendChild((/** @type {?} */ (this._document.createTextNode(message))));\n        this._createMessagesContainer();\n        (/** @type {?} */ (messagesContainer)).appendChild(messageElement);\n        messageRegistry.set(message, { messageElement, referenceCount: 0 });\n    }\n    /**\n     * Deletes the message element from the global messages container.\n     * @private\n     * @param {?} message\n     * @return {?}\n     */\n    _deleteMessageElement(message) {\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        /** @type {?} */\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(message);\n    }\n    /**\n     * Creates the global container for all aria-describedby messages.\n     * @private\n     * @return {?}\n     */\n    _createMessagesContainer() {\n        if (!messagesContainer) {\n            /** @type {?} */\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer) {\n                (/** @type {?} */ (preExistingContainer.parentNode)).removeChild(preExistingContainer);\n            }\n            messagesContainer = this._document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            messagesContainer.setAttribute('aria-hidden', 'true');\n            messagesContainer.style.display = 'none';\n            this._document.body.appendChild(messagesContainer);\n        }\n    }\n    /**\n     * Deletes the global messages container.\n     * @private\n     * @return {?}\n     */\n    _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n    /**\n     * Removes all cdk-describedby messages that are hosted through the element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        /** @type {?} */\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _addMessageReference(element, message) {\n        /** @type {?} */\n        const registeredMessage = (/** @type {?} */ (messageRegistry.get(message)));\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _removeMessageReference(element, message) {\n        /** @type {?} */\n        const registeredMessage = (/** @type {?} */ (messageRegistry.get(message)));\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /**\n     * Returns true if the element has been described by the provided message ID.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _isElementDescribedByMessage(element, message) {\n        /** @type {?} */\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        /** @type {?} */\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /**\n     * Determines whether a message can be described on a particular element.\n     * @private\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _canBeDescribed(element, message) {\n        return element.nodeType === this._document.ELEMENT_NODE && message != null &&\n            !!`${message}`.trim();\n    }\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) { return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nAriaDescriber.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AriaDescriber, factory: AriaDescriber.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nAriaDescriber.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ AriaDescriber.ngInjectableDef = defineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(inject(DOCUMENT)); }, token: AriaDescriber, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n    return parentDispatcher || new AriaDescriber(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst ARIA_DESCRIBER_PROVIDER = {\n    // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n    provide: AriaDescriber,\n    deps: [\n        [new Optional(), new SkipSelf(), AriaDescriber],\n        (/** @type {?} */ (DOCUMENT))\n    ],\n    useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\nclass ListKeyManager {\n    /**\n     * @param {?} _items\n     */\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /**\n         * Stream that emits whenever the active item of the list manager changes.\n         */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    /** @type {?} */\n                    const itemArray = newItems.toArray();\n                    /** @type {?} */\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} predicate Function that determines whether the given item should be skipped.\n     * @return {THIS}\n     */\n    skipPredicate(predicate) {\n        (/** @type {?} */ (this))._skipPredicateFn = predicate;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n     * @return {THIS}\n     */\n    withWrap(shouldWrap = true) {\n        (/** @type {?} */ (this))._wrap = shouldWrap;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} enabled Whether vertical selection should be enabled.\n     * @return {THIS}\n     */\n    withVerticalOrientation(enabled = true) {\n        (/** @type {?} */ (this))._vertical = enabled;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction Direction in which the selection can be moved.\n     * @return {THIS}\n     */\n    withHorizontalOrientation(direction) {\n        (/** @type {?} */ (this))._horizontal = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} keys\n     * @return {THIS}\n     */\n    withAllowedModifierKeys(keys) {\n        (/** @type {?} */ (this))._allowedModifierKeys = keys;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n     * @return {THIS}\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if ((/** @type {?} */ (this))._items.length && (/** @type {?} */ (this))._items.some(item => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        (/** @type {?} */ (this))._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        (/** @type {?} */ (this))._typeaheadSubscription = (/** @type {?} */ (this))._letterKeyStream.pipe(tap(keyCode => (/** @type {?} */ (this))._pressedLetters.push(keyCode)), debounceTime(debounceInterval), filter(() => (/** @type {?} */ (this))._pressedLetters.length > 0), map(() => (/** @type {?} */ (this))._pressedLetters.join(''))).subscribe(inputString => {\n            /** @type {?} */\n            const items = (/** @type {?} */ (this))._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                /** @type {?} */\n                const index = ((/** @type {?} */ (this))._activeItemIndex + i) % items.length;\n                /** @type {?} */\n                const item = items[index];\n                if (!(/** @type {?} */ (this))._skipPredicateFn(item) &&\n                    (/** @type {?} */ (item.getLabel))().toUpperCase().trim().indexOf(inputString) === 0) {\n                    (/** @type {?} */ (this)).setActiveItem(index);\n                    break;\n                }\n            }\n            (/** @type {?} */ (this))._pressedLetters = [];\n        });\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    setActiveItem(item) {\n        /** @type {?} */\n        const previousIndex = this._activeItemIndex;\n        this.updateActiveItem(item);\n        if (this._activeItemIndex !== previousIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param {?} event Keyboard event to be used for determining which element should be active.\n     * @return {?}\n     */\n    onKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        /** @type {?} */\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /**\n     * Index of the currently active item.\n     * @return {?}\n     */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /**\n     * The active item.\n     * @return {?}\n     */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /**\n     * Sets the active item to the first enabled item in the list.\n     * @return {?}\n     */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /**\n     * Sets the active item to the last enabled item in the list.\n     * @return {?}\n     */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /**\n     * Sets the active item to the next enabled item in the list.\n     * @return {?}\n     */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /**\n     * Sets the active item to a previous enabled item in the list.\n     * @return {?}\n     */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    updateActiveItem(item) {\n        /** @type {?} */\n        const itemArray = this._getItemsArray();\n        /** @type {?} */\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        /** @type {?} */\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /**\n     * Allows setting of the activeItemIndex without any other effects.\n     * @deprecated Use `updateActiveItem` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} index The new activeItemIndex.\n     * @return {?}\n     */\n    updateActiveItemIndex(index) {\n        this.updateActiveItem(index);\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     * @private\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     * @private\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveInWrapMode(delta) {\n        /** @type {?} */\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            /** @type {?} */\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            /** @type {?} */\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     * @private\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     * @private\n     * @param {?} index\n     * @param {?} fallbackDelta\n     * @return {?}\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        /** @type {?} */\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /**\n     * Returns the items as an array.\n     * @private\n     * @return {?}\n     */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Focus origin to be used when focusing items.\n     * @return {THIS}\n     */\n    setFocusOrigin(origin) {\n        (/** @type {?} */ (this))._origin = origin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @param {?} element\n     * @return {?} Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        /** @type {?} */\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            /** @type {?} */\n            const frameType = frameElement && frameElement.nodeName.toLowerCase();\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n                return false;\n            }\n            // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        /** @type {?} */\n        let nodeName = element.nodeName.toLowerCase();\n        /** @type {?} */\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe') {\n            // The frames may be tabbable depending on content, but it's not possibly to reliably\n            // investigate the content of the frames.\n            return false;\n        }\n        if (nodeName === 'audio') {\n            if (!element.hasAttribute('controls')) {\n                // By default an <audio> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK) {\n                // In Blink <audio controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'video') {\n            if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n                // In Trident a <video> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK || this._platform.FIREFOX) {\n                // In Chrome and Firefox <video controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n            // In all Blink and WebKit based browsers <object> elements are never tabbable.\n            return false;\n        }\n        // In iOS the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is focusable.\n     */\n    isFocusable(element) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n    }\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) { return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nInteractivityChecker.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: InteractivityChecker, factory: InteractivityChecker.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nInteractivityChecker.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ InteractivityChecker.ngInjectableDef = defineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(inject(Platform)); }, token: InteractivityChecker, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\nfunction getFrameElement(window) {\n    try {\n        return (/** @type {?} */ (window.frameElement));\n    }\n    catch (_a) {\n        return null;\n    }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element) {\n    /** @type {?} */\n    let nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    /** @type {?} */\n    let tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    /** @type {?} */\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element) {\n    /** @type {?} */\n    let nodeName = element.nodeName.toLowerCase();\n    /** @type {?} */\n    let inputType = nodeName === 'input' && ((/** @type {?} */ (element))).type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\nclass FocusTrap {\n    /**\n     * @param {?} _element\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?=} deferAnchors\n     */\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this._startAnchorListener = () => this.focusLastTabbableElement();\n        this._endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /**\n     * Destroys the focus trap by cleaning up the anchors.\n     * @return {?}\n     */\n    destroy() {\n        /** @type {?} */\n        const startAnchor = this._startAnchor;\n        /** @type {?} */\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this._startAnchorListener);\n            if (startAnchor.parentNode) {\n                startAnchor.parentNode.removeChild(startAnchor);\n            }\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this._endAnchorListener);\n            if (endAnchor.parentNode) {\n                endAnchor.parentNode.removeChild(endAnchor);\n            }\n        }\n        this._startAnchor = this._endAnchor = null;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                (/** @type {?} */ (this._startAnchor)).addEventListener('focus', this._startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                (/** @type {?} */ (this._endAnchor)).addEventListener('focus', this._endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore((/** @type {?} */ (this._startAnchor)), this._element);\n            this._element.parentNode.insertBefore((/** @type {?} */ (this._endAnchor)), this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusInitialElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusFirstTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusLastTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @private\n     * @param {?} bound The boundary to get (start or end of trapped region).\n     * @return {?} The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        /** @type {?} */\n        let markers = (/** @type {?} */ (this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n            `[cdkFocusRegion${bound}], ` +\n            `[cdk-focus-${bound}]`)));\n        for (let i = 0; i < markers.length; i++) {\n            // @breaking-change 8.0.0\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                    `attribute will be removed in 8.0.0.`, markers[i]);\n            }\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0.`, markers[i]);\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length ?\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusInitialElement() {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        /** @type {?} */\n        const redirectToElement = (/** @type {?} */ (this._element.querySelector(`[cdk-focus-initial], ` +\n            `[cdkFocusInitial]`)));\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if (isDevMode() && !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            redirectToElement.focus();\n            return true;\n        }\n        return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusFirstTabbableElement() {\n        /** @type {?} */\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusLastTabbableElement() {\n        /** @type {?} */\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfuly been attached.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /**\n     * Get the first tabbable element from a DOM subtree (inclusive).\n     * @private\n     * @param {?} root\n     * @return {?}\n     */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n        // back to `childNodes` which includes text nodes, comments etc.\n        /** @type {?} */\n        let children = root.children || root.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            /** @type {?} */\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getFirstTabbableElement((/** @type {?} */ (children[i]))) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /**\n     * Get the last tabbable element from a DOM subtree (inclusive).\n     * @private\n     * @param {?} root\n     * @return {?}\n     */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        /** @type {?} */\n        let children = root.children || root.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getLastTabbableElement((/** @type {?} */ (children[i]))) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /**\n     * Creates an anchor element.\n     * @private\n     * @return {?}\n     */\n    _createAnchor() {\n        /** @type {?} */\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @private\n     * @param {?} isEnabled Whether the focus trap is enabled.\n     * @param {?} anchor Anchor on which to toggle the tabindex.\n     * @return {?}\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Executes a function when the zone is stable.\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nclass FocusTrapFactory {\n    /**\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param {?} element The element around which focus will be trapped.\n     * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @return {?} The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) { return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nFocusTrapFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FocusTrapFactory, factory: FocusTrapFactory.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ FocusTrapFactory.ngInjectableDef = defineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(inject(InteractivityChecker), inject(NgZone), inject(DOCUMENT)); }, token: FocusTrapFactory, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Directive for trapping focus within a region.\n */\nclass CdkTrapFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _document\n     */\n    constructor(_elementRef, _focusTrapFactory, _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /**\n         * Previously focused element to restore focus to upon destroy when using autoCapture.\n         */\n        this._previouslyFocusedElement = null;\n        this._document = _document;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n    get enabled() { return this.focusTrap.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the directive should automatially move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     * @return {?}\n     */\n    get autoCapture() { return this._autoCapture; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoCapture(value) { this._autoCapture = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._previouslyFocusedElement = (/** @type {?} */ (this._document.activeElement));\n            this.focusTrap.focusInitialElementWhenReady();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) { return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkTrapFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTrapFocus, selectors: [[\"\", \"cdkTrapFocus\", \"\"]], inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"] });\n/** @nocollapse */\nCdkTrapFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTrapFocus.propDecorators = {\n    enabled: [{ type: Input, args: ['cdkTrapFocus',] }],\n    autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { enabled: [{\n            type: Input,\n            args: ['cdkTrapFocus']\n        }], autoCapture: [{\n            type: Input,\n            args: ['cdkTrapFocusAutoCapture']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// The token for the live announcer element is defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n/** @type {?} */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LiveAnnouncer {\n    /**\n     * @param {?} elementToken\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(elementToken, _ngZone, _document) {\n        this._ngZone = _ngZone;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    /**\n     * @param {?} message\n     * @param {...?} args\n     * @return {?}\n     */\n    announce(message, ...args) {\n        /** @type {?} */\n        let politeness;\n        /** @type {?} */\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', (/** @type {?} */ (politeness)) || 'polite');\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                clearTimeout(this._previousTimeout);\n                this._previousTimeout = setTimeout(() => {\n                    this._liveElement.textContent = message;\n                    resolve();\n                    if (typeof duration === 'number') {\n                        this._previousTimeout = setTimeout(() => this.clear(), duration);\n                    }\n                }, 100);\n            });\n        });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     * @return {?}\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        clearTimeout(this._previousTimeout);\n        if (this._liveElement && this._liveElement.parentNode) {\n            this._liveElement.parentNode.removeChild(this._liveElement);\n            this._liveElement = (/** @type {?} */ (null));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createLiveElement() {\n        /** @type {?} */\n        const elementClass = 'cdk-live-announcer-element';\n        /** @type {?} */\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        /** @type {?} */\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            (/** @type {?} */ (previousElements[i].parentNode)).removeChild(previousElements[i]);\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) { return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nLiveAnnouncer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LiveAnnouncer, factory: LiveAnnouncer.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nLiveAnnouncer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ LiveAnnouncer.ngInjectableDef = defineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), inject(NgZone), inject(DOCUMENT)); }, token: LiveAnnouncer, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _liveAnnouncer\n     * @param {?} _contentObserver\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'off';\n    }\n    /**\n     * The aria-live politeness level to use when announcing messages.\n     * @return {?}\n     */\n    get politeness() { return this._politeness; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set politeness(value) {\n        this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver\n                    .observe(this._elementRef)\n                    .subscribe(() => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    /** @type {?} */\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness);\n                        this._previousAnnouncedText = elementText;\n                    }\n                });\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) { return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkAriaLive.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAriaLive, selectors: [[\"\", \"cdkAriaLive\", \"\"]], inputs: { politeness: [\"cdkAriaLive\", \"politeness\"] }, exportAs: [\"cdkAriaLive\"] });\n/** @nocollapse */\nCdkAriaLive.ctorParameters = () => [\n    { type: ElementRef },\n    { type: LiveAnnouncer },\n    { type: ContentObserver },\n    { type: NgZone }\n];\nCdkAriaLive.propDecorators = {\n    politeness: [{ type: Input, args: ['cdkAriaLive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAriaLive]',\n                exportAs: 'cdkAriaLive'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: LiveAnnouncer }, { type: ɵngcc2.ContentObserver }, { type: ɵngcc0.NgZone }]; }, { politeness: [{\n            type: Input,\n            args: ['cdkAriaLive']\n        }] }); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentAnnouncer\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentAnnouncer, liveElement, _document, ngZone) {\n    return parentAnnouncer || new LiveAnnouncer(liveElement, ngZone, _document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst LIVE_ANNOUNCER_PROVIDER = {\n    // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n    provide: LiveAnnouncer,\n    deps: [\n        [new Optional(), new SkipSelf(), LiveAnnouncer],\n        [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n        DOCUMENT,\n        NgZone,\n    ],\n    useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\n/** @type {?} */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also\n * mark the the listener as passive if the browser supports it.\n * @type {?}\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true\n});\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nclass FocusMonitor {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * The focus origin that the next focus event is a result of.\n         */\n        this._origin = null;\n        /**\n         * Whether the window has just been focused.\n         */\n        this._windowFocused = false;\n        /**\n         * Map of elements being monitored to their info.\n         */\n        this._elementInfo = new Map();\n        /**\n         * The number of elements currently being monitored.\n         */\n        this._monitoredElementCount = 0;\n        /**\n         * Event listener for `keydown` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentKeydownListener = () => {\n            // On keydown record the origin and clear any touch event that may be in progress.\n            this._lastTouchTarget = null;\n            this._setOriginForCurrentEventQueue('keyboard');\n        };\n        /**\n         * Event listener for `mousedown` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentMousedownListener = () => {\n            // On mousedown record the origin only if there is not touch\n            // target, since a mousedown can happen as a result of a touch event.\n            if (!this._lastTouchTarget) {\n                this._setOriginForCurrentEventQueue('mouse');\n            }\n        };\n        /**\n         * Event listener for `touchstart` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentTouchstartListener = (event) => {\n            // When the touchstart event fires the focus event is not yet in the event queue. This means\n            // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n            // see if a focus happens.\n            if (this._touchTimeoutId != null) {\n                clearTimeout(this._touchTimeoutId);\n            }\n            this._lastTouchTarget = event.target;\n            this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n        };\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n        };\n    }\n    /**\n     * @param {?} element\n     * @param {?=} checkChildren\n     * @return {?}\n     */\n    monitor(element, checkChildren = false) {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return of(null);\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(element);\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(nativeElement)) {\n            /** @type {?} */\n            let cachedInfo = this._elementInfo.get(nativeElement);\n            (/** @type {?} */ (cachedInfo)).checkChildren = checkChildren;\n            return (/** @type {?} */ (cachedInfo)).subject.asObservable();\n        }\n        // Create monitored element info.\n        /** @type {?} */\n        let info = {\n            unlisten: () => { },\n            checkChildren: checkChildren,\n            subject: new Subject()\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._incrementMonitoredElementCount();\n        // Start listening. We need to listen in capture phase since focus events don't bubble.\n        /** @type {?} */\n        let focusListener = (event) => this._onFocus(event, nativeElement);\n        /** @type {?} */\n        let blurListener = (event) => this._onBlur(event, nativeElement);\n        this._ngZone.runOutsideAngular(() => {\n            nativeElement.addEventListener('focus', focusListener, true);\n            nativeElement.addEventListener('blur', blurListener, true);\n        });\n        // Create an unlisten function for later.\n        info.unlisten = () => {\n            nativeElement.removeEventListener('focus', focusListener, true);\n            nativeElement.removeEventListener('blur', blurListener, true);\n        };\n        return info.subject.asObservable();\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    stopMonitoring(element) {\n        /** @type {?} */\n        const nativeElement = coerceElement(element);\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._decrementMonitoredElementCount();\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focusVia(element, origin, options) {\n        /** @type {?} */\n        const nativeElement = coerceElement(element);\n        this._setOriginForCurrentEventQueue(origin);\n        // `focus` isn't available on the server\n        if (typeof nativeElement.focus === 'function') {\n            // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n            ((/** @type {?} */ (nativeElement))).focus(options);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} className\n     * @param {?} shouldSet\n     * @return {?}\n     */\n    _toggleClass(element, className, shouldSet) {\n        if (shouldSet) {\n            element.classList.add(className);\n        }\n        else {\n            element.classList.remove(className);\n        }\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @private\n     * @param {?} element The element to update the classes on.\n     * @param {?=} origin The focus origin.\n     * @return {?}\n     */\n    _setClasses(element, origin) {\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (elementInfo) {\n            this._toggleClass(element, 'cdk-focused', !!origin);\n            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n            this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n    }\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @private\n     * @param {?} origin The origin to set.\n     * @return {?}\n     */\n    _setOriginForCurrentEventQueue(origin) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n            // tick after the interaction event fired. To ensure the focus origin is always correct,\n            // the focus origin will be determined at the beginning of the next tick.\n            this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n        });\n    }\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @private\n     * @param {?} event The focus event to check.\n     * @return {?} Whether the event was caused by a touch.\n     */\n    _wasCausedByTouch(event) {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, 'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        /** @type {?} */\n        let focusTarget = event.target;\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @private\n     * @param {?} event The focus event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n            return;\n        }\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        /** @type {?} */\n        let origin = this._origin;\n        if (!origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                origin = this._lastFocusOrigin;\n            }\n            else if (this._wasCausedByTouch(event)) {\n                origin = 'touch';\n            }\n            else {\n                origin = 'program';\n            }\n        }\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param {?} event The blur event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo.subject, null);\n    }\n    /**\n     * @private\n     * @param {?} subject\n     * @param {?} origin\n     * @return {?}\n     */\n    _emitOrigin(subject, origin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _incrementMonitoredElementCount() {\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount == 1 && this._platform.isBrowser) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular(() => {\n                document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n                document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n                document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n                window.addEventListener('focus', this._windowFocusListener);\n            });\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _decrementMonitoredElementCount() {\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n            document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n            document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._touchTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) { return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nFocusMonitor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FocusMonitor, factory: FocusMonitor.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFocusMonitor.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform }\n];\n/** @nocollapse */ FocusMonitor.ngInjectableDef = defineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(inject(NgZone), inject(Platform)); }, token: FocusMonitor, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     */\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.cdkFocusChange = new EventEmitter();\n        this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._monitorSubscription.unsubscribe();\n    }\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) { return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor)); };\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkMonitorFocus, selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]], outputs: { cdkFocusChange: \"cdkFocusChange\" } });\n/** @nocollapse */\nCdkMonitorFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor }\n];\nCdkMonitorFocus.propDecorators = {\n    cdkFocusChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusMonitor }]; }, { cdkFocusChange: [{\n            type: Output\n        }] }); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst FOCUS_MONITOR_PROVIDER = {\n    // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusMonitor,\n    deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n    useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nfunction isFakeMousedownFromScreenReader(event) {\n    return event.buttons === 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass A11yModule {\n}\nA11yModule.ɵfac = function A11yModule_Factory(t) { return new (t || A11yModule)(); };\nA11yModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: A11yModule });\nA11yModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule, PlatformModule, ObserversModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, PlatformModule, ObserversModule],\n                declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, { declarations: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; }, imports: function () { return [CommonModule, PlatformModule, ObserversModule]; }, exports: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}