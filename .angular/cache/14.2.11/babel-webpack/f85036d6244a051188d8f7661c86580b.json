{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\nclass BlockScrollStrategy {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} document\n   */\n  constructor(_viewportRuler, document) {\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @return {?}\n   */\n\n\n  attach() {}\n  /**\n   * Blocks page-level scroll while the attached overlay is open.\n   * @return {?}\n   */\n\n\n  enable() {\n    if (this._canBeEnabled()) {\n      /** @type {?} */\n      const root =\n      /** @type {?} */\n      this._document.documentElement;\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n  /**\n   * Unblocks page-level scroll while the attached overlay is open.\n   * @return {?}\n   */\n\n\n  disable() {\n    if (this._isEnabled) {\n      /** @type {?} */\n      const html =\n      /** @type {?} */\n      this._document.documentElement;\n      /** @type {?} */\n\n      const body =\n      /** @type {?} */\n      this._document.body;\n      /** @type {?} */\n\n      const htmlStyle =\n      /** @type {?} */\n      html.style;\n      /** @type {?} */\n\n      const bodyStyle =\n      /** @type {?} */\n      body.style;\n      /** @type {?} */\n\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      /** @type {?} */\n\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n      this._isEnabled = false;\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n\n      htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n      htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n      bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _canBeEnabled() {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n\n    /** @type {?} */\n    const html =\n    /** @type {?} */\n    this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n    /** @type {?} */\n\n\n    const body = this._document.body;\n    /** @type {?} */\n\n    const viewport = this._viewportRuler.getViewportSize();\n\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(`Scroll strategy has already been attached.`);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nclass CloseScrollStrategy {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _ngZone\n   * @param {?} _viewportRuler\n   * @param {?=} _config\n   */\n  constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /**\n     * Detaches the overlay ref and disables the scroll strategy.\n     */\n\n    this._detach = () => {\n      this.disable();\n\n      if (this._overlayRef.hasAttached()) {\n        this._ngZone.run(() => this._overlayRef.detach());\n      }\n    };\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n  /**\n   * Enables the closing of the attached overlay on scroll.\n   * @return {?}\n   */\n\n\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n      this._scrollSubscription = stream.subscribe(() => {\n        /** @type {?} */\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) >\n        /** @type {?} */\n\n        /** @type {?} */\n        this._config.threshold) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n  /**\n   * Disables the closing the attached overlay on scroll.\n   * @return {?}\n   */\n\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n\n      this._scrollSubscription = null;\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\n\n\nclass NoopScrollStrategy {\n  /**\n   * Does nothing, as this scroll strategy is a no-op.\n   * @return {?}\n   */\n  enable() {}\n  /**\n   * Does nothing, as this scroll strategy is a no-op.\n   * @return {?}\n   */\n\n\n  disable() {}\n  /**\n   * Does nothing, as this scroll strategy is a no-op.\n   * @return {?}\n   */\n\n\n  attach() {}\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(containerBounds => {\n    /** @type {?} */\n    const outsideAbove = element.bottom < containerBounds.top;\n    /** @type {?} */\n\n    const outsideBelow = element.top > containerBounds.bottom;\n    /** @type {?} */\n\n    const outsideLeft = element.right < containerBounds.left;\n    /** @type {?} */\n\n    const outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(scrollContainerRect => {\n    /** @type {?} */\n    const clippedAbove = element.top < scrollContainerRect.top;\n    /** @type {?} */\n\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    /** @type {?} */\n\n    const clippedLeft = element.left < scrollContainerRect.left;\n    /** @type {?} */\n\n    const clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nclass RepositionScrollStrategy {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewportRuler\n   * @param {?} _ngZone\n   * @param {?=} _config\n   */\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /**\n   * Attaches this scroll strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n  /**\n   * Enables repositioning of the attached overlay on scroll.\n   * @return {?}\n   */\n\n\n  enable() {\n    if (!this._scrollSubscription) {\n      /** @type {?} */\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n        if (this._config && this._config.autoClose) {\n          /** @type {?} */\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n\n          const {\n            width,\n            height\n          } = this._viewportRuler.getViewportSize(); // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n\n          /** @type {?} */\n\n\n          const parentRects = [{\n            width,\n            height,\n            bottom: height,\n            right: width,\n            top: 0,\n            left: 0\n          }];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Disables repositioning of the attached overlay on scroll.\n   * @return {?}\n   */\n\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n\n      this._scrollSubscription = null;\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nclass ScrollStrategyOptions {\n  /**\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewportRuler\n   * @param {?} _ngZone\n   * @param {?} document\n   */\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    /**\n     * Do nothing on scroll.\n     */\n\n    this.noop = () => new NoopScrollStrategy();\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * @param config Configuration to be used inside the scroll strategy.\n     */\n\n\n    this.close = config => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n    /**\n     * Block scrolling.\n     */\n\n\n    this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n    /**\n     * Update the overlay's position on scroll.\n     * @param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     */\n\n\n    this.reposition = config => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n\n    this._document = document;\n  }\n\n}\n\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nScrollStrategyOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ScrollStrategyOptions,\n  factory: ScrollStrategyOptions.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nScrollStrategyOptions.ctorParameters = () => [{\n  type: ScrollDispatcher\n}, {\n  type: ViewportRuler\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\n\n\nScrollStrategyOptions.ngInjectableDef = defineInjectable({\n  factory: function ScrollStrategyOptions_Factory() {\n    return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT));\n  },\n  token: ScrollStrategyOptions,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Initial configuration used when creating an overlay.\n */\n\n\nclass OverlayConfig {\n  /**\n   * @param {?=} config\n   */\n  constructor(config) {\n    /**\n     * Strategy to be used when handling scroll events while the overlay is open.\n     */\n    this.scrollStrategy = new NoopScrollStrategy();\n    /**\n     * Custom class to add to the overlay pane.\n     */\n\n    this.panelClass = '';\n    /**\n     * Whether the overlay has a backdrop.\n     */\n\n    this.hasBackdrop = false;\n    /**\n     * Custom class to add to the backdrop\n     */\n\n    this.backdropClass = 'cdk-overlay-dark-backdrop';\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.disposeOnNavigation = false;\n\n    if (config) {\n      Object.keys(config).forEach(k => {\n        /** @type {?} */\n        const key =\n        /** @type {?} */\n        k;\n\n        if (typeof config[key] !== 'undefined') {\n          this[key] = config[key];\n        }\n      });\n    }\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The points of the origin element and the overlay element to connect.\n */\n\n\nclass ConnectionPositionPair {\n  /**\n   * @param {?} origin\n   * @param {?} overlay\n   * @param {?=} offsetX\n   * @param {?=} offsetY\n   * @param {?=} panelClass\n   */\n  constructor(origin, overlay, offsetX, offsetY, panelClass) {\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.panelClass = panelClass;\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\n\n\nclass ScrollingVisibility {}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\n\n\nclass ConnectedOverlayPositionChange {\n  /**\n   * @param {?} connectionPair\n   * @param {?} scrollableViewProperties\n   */\n  constructor(connectionPair, scrollableViewProperties) {\n    this.connectionPair = connectionPair;\n    this.scrollableViewProperties = scrollableViewProperties;\n  }\n\n}\n/** @nocollapse */\n\n\nConnectedOverlayPositionChange.ctorParameters = () => [{\n  type: ConnectionPositionPair\n}, {\n  type: ScrollingVisibility,\n  decorators: [{\n    type: Optional\n  }]\n}];\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\n\n\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nclass OverlayKeyboardDispatcher {\n  /**\n   * @param {?} document\n   */\n  constructor(document) {\n    /**\n     * Currently attached overlays in the order they were attached.\n     */\n    this._attachedOverlays = [];\n    /**\n     * Keyboard event listener that will be attached to the body.\n     */\n\n    this._keydownListener = event => {\n      /** @type {?} */\n      const overlays = this._attachedOverlays;\n\n      for (let i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEventSubscriptions > 0) {\n          overlays[i]._keydownEvents.next(event);\n\n          break;\n        }\n      }\n    };\n\n    this._document = document;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._detach();\n  }\n  /**\n   * Add a new overlay to the list of attached overlay refs.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  add(overlayRef) {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef); // Lazily start dispatcher once first overlay is added\n\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener, true);\n\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n  /**\n   * Remove an overlay from the list of attached overlay refs.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  remove(overlayRef) {\n    /** @type {?} */\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    } // Remove the global listener once there are no more overlays.\n\n\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n  /**\n   * Detaches the global keyboard event listener.\n   * @private\n   * @return {?}\n   */\n\n\n  _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener, true);\n\n      this._isAttached = false;\n    }\n  }\n\n}\n\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayKeyboardDispatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayKeyboardDispatcher,\n  factory: OverlayKeyboardDispatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayKeyboardDispatcher.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\n\n\nOverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({\n  factory: function OverlayKeyboardDispatcher_Factory() {\n    return new OverlayKeyboardDispatcher(inject(DOCUMENT));\n  },\n  token: OverlayKeyboardDispatcher,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\n\n\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [[new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n  /** @type {?} */\n  // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n  // of the type expected by Angular\n  DOCUMENT],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Container inside which all overlays will render.\n */\n\nclass OverlayContainer {\n  /**\n   * @param {?} _document\n   */\n  constructor(_document) {\n    this._document = _document;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @return {?} the container element\n   */\n\n\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   * @protected\n   * @return {?}\n   */\n\n\n  _createContainer() {\n    /** @type {?} */\n    const container = this._document.createElement('div');\n\n    container.classList.add('cdk-overlay-container');\n\n    this._document.body.appendChild(container);\n\n    this._containerElement = container;\n  }\n\n}\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayContainer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayContainer,\n  factory: OverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\n\n\nOverlayContainer.ngInjectableDef = defineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(inject(DOCUMENT));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\n\n\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n  return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\n\n\nconst OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer],\n  /** @type {?} */\n  DOCUMENT],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\nclass OverlayRef {\n  /**\n   * @param {?} _portalOutlet\n   * @param {?} _host\n   * @param {?} _pane\n   * @param {?} _config\n   * @param {?} _ngZone\n   * @param {?} _keyboardDispatcher\n   * @param {?} _document\n   * @param {?=} _location\n   */\n  constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n    this._keydownEventsObservable = new Observable(observer => {\n      /** @type {?} */\n      const subscription = this._keydownEvents.subscribe(observer);\n\n      this._keydownEventSubscriptions++;\n      return () => {\n        subscription.unsubscribe();\n        this._keydownEventSubscriptions--;\n      };\n    });\n    /**\n     * Stream of keydown events dispatched to this overlay.\n     */\n\n    this._keydownEvents = new Subject();\n    /**\n     * Amount of subscriptions to the keydown events.\n     */\n\n    this._keydownEventSubscriptions = 0;\n\n    if (_config.scrollStrategy) {\n      _config.scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /**\n   * The overlay's HTML element\n   * @return {?}\n   */\n\n\n  get overlayElement() {\n    return this._pane;\n  }\n  /**\n   * The overlay's backdrop HTML element.\n   * @return {?}\n   */\n\n\n  get backdropElement() {\n    return this._backdropElement;\n  }\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   * @return {?}\n   */\n\n\n  get hostElement() {\n    return this._host;\n  }\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param {?} portal Portal instance to which to attach the overlay.\n   * @return {?} The portal attachment result.\n   */\n\n\n  attach(portal) {\n    /** @type {?} */\n    let attachResult = this._portalOutlet.attach(portal);\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    } // Update the pane element with the given configuration.\n\n\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    this._updateStackingOrder();\n\n    this._updateElementSize();\n\n    this._updateElementDirection();\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.enable();\n    } // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n\n\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      // The overlay could've been detached before the zone has stabilized.\n      if (this.hasAttached()) {\n        this.updatePosition();\n      }\n    }); // Enable pointer events for the overlay pane element.\n\n\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    } // Only emit the `attachments` event once all other setup is done.\n\n\n    this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n    this._keyboardDispatcher.add(this); // @breaking-change 8.0.0 remove the null check for `_location`\n    // once the constructor parameter is made required.\n\n\n    if (this._config.disposeOnNavigation && this._location) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    return attachResult;\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @return {?} The portal detachment result.\n   */\n\n\n  detach() {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n    /** @type {?} */\n\n\n    const detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n    this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n    this._keyboardDispatcher.remove(this); // Keeping the host element in DOM the can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n\n\n    this._detachContentWhenStable(); // Stop listening for location changes.\n\n\n    this._locationChanges.unsubscribe();\n\n    return detachmentResult;\n  }\n  /**\n   * Cleans up the overlay from the DOM.\n   * @return {?}\n   */\n\n\n  dispose() {\n    /** @type {?} */\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    if (this._config.scrollStrategy) {\n      this._config.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n\n    this._locationChanges.unsubscribe();\n\n    this._keyboardDispatcher.remove(this);\n\n    this._portalOutlet.dispose();\n\n    this._attachments.complete();\n\n    this._backdropClick.complete();\n\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n\n      this._host =\n      /** @type {?} */\n      null;\n    }\n\n    this._previousHostParent = this._pane =\n    /** @type {?} */\n    null;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n  /**\n   * Whether the overlay has attached content.\n   * @return {?}\n   */\n\n\n  hasAttached() {\n    return this._portalOutlet.hasAttached();\n  }\n  /**\n   * Gets an observable that emits when the backdrop has been clicked.\n   * @return {?}\n   */\n\n\n  backdropClick() {\n    return this._backdropClick.asObservable();\n  }\n  /**\n   * Gets an observable that emits when the overlay has been attached.\n   * @return {?}\n   */\n\n\n  attachments() {\n    return this._attachments.asObservable();\n  }\n  /**\n   * Gets an observable that emits when the overlay has been detached.\n   * @return {?}\n   */\n\n\n  detachments() {\n    return this._detachments.asObservable();\n  }\n  /**\n   * Gets an observable of keydown events targeted to this overlay.\n   * @return {?}\n   */\n\n\n  keydownEvents() {\n    return this._keydownEventsObservable;\n  }\n  /**\n   * Gets the current overlay configuration, which is immutable.\n   * @return {?}\n   */\n\n\n  getConfig() {\n    return this._config;\n  }\n  /**\n   * Updates the position of the overlay based on the position strategy.\n   * @return {?}\n   */\n\n\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n  /**\n   * Switches to a new position strategy and updates the overlay position.\n   * @param {?} strategy\n   * @return {?}\n   */\n\n\n  updatePositionStrategy(strategy) {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n  /**\n   * Update the size properties of the overlay.\n   * @param {?} sizeConfig\n   * @return {?}\n   */\n\n\n  updateSize(sizeConfig) {\n    this._config = Object.assign({}, this._config, sizeConfig);\n\n    this._updateElementSize();\n  }\n  /**\n   * Sets the LTR/RTL direction for the overlay.\n   * @param {?} dir\n   * @return {?}\n   */\n\n\n  setDirection(dir) {\n    this._config = Object.assign({}, this._config, {\n      direction: dir\n    });\n\n    this._updateElementDirection();\n  }\n  /**\n   * Add a CSS class or an array of classes to the overlay pane.\n   * @param {?} classes\n   * @return {?}\n   */\n\n\n  addPanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n  /**\n   * Remove a CSS class or an array of classes from the overlay pane.\n   * @param {?} classes\n   * @return {?}\n   */\n\n\n  removePanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n  /**\n   * Returns the layout direction of the overlay panel.\n   * @return {?}\n   */\n\n\n  getDirection() {\n    /** @type {?} */\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n  /**\n   * Updates the text direction of the overlay panel.\n   * @private\n   * @return {?}\n   */\n\n\n  _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n  /**\n   * Updates the size of the overlay element based on the overlay config.\n   * @private\n   * @return {?}\n   */\n\n\n  _updateElementSize() {\n    /** @type {?} */\n    const style = this._pane.style;\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n  /**\n   * Toggles the pointer events for the overlay pane element.\n   * @private\n   * @param {?} enablePointer\n   * @return {?}\n   */\n\n\n  _togglePointerEvents(enablePointer) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n  /**\n   * Attaches a backdrop for this overlay.\n   * @private\n   * @return {?}\n   */\n\n\n  _attachBackdrop() {\n    /** @type {?} */\n    const showingClass = 'cdk-overlay-backdrop-showing';\n    this._backdropElement = this._document.createElement('div');\n\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    } // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n\n\n    /** @type {?} */\n    this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n\n\n    this._backdropElement.addEventListener('click', event => this._backdropClick.next(event)); // Add class to fade-in the backdrop after one frame.\n\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   * @private\n   * @return {?}\n   */\n\n\n  _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      /** @type {?} */\n      this._host.parentNode.appendChild(this._host);\n    }\n  }\n  /**\n   * Detaches the backdrop (if any) associated with the overlay.\n   * @return {?}\n   */\n\n\n  detachBackdrop() {\n    /** @type {?} */\n    let backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n    /** @type {?} */\n\n\n    let timeoutId;\n    /** @type {?} */\n\n    let finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach && backdropToDetach.parentNode) {\n        backdropToDetach.parentNode.removeChild(backdropToDetach);\n      } // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n\n\n      if (this._backdropElement == backdropToDetach) {\n        this._backdropElement = null;\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(\n        /** @type {?} */\n        backdropToDetach, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      /** @type {?} */\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n    }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n\n\n    backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n  /**\n   * Toggles a single CSS class or an array of classes on an element.\n   * @private\n   * @param {?} element\n   * @param {?} cssClasses\n   * @param {?} isAdd\n   * @return {?}\n   */\n\n\n  _toggleClasses(element, cssClasses, isAdd) {\n    /** @type {?} */\n    const classList = element.classList;\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n    });\n  }\n  /**\n   * Detaches the overlay content next time the zone stabilizes.\n   * @private\n   * @return {?}\n   */\n\n\n  _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n\n      /** @type {?} */\n      const subscription = this._ngZone.onStable.asObservable().pipe(takeUntil(merge(this._attachments, this._detachments))).subscribe(() => {\n        // Needs a couple of checks for the pane and host, because\n        // they may have been removed by the time the zone stabilizes.\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\n          if (this._pane && this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, false);\n          }\n\n          if (this._host && this._host.parentElement) {\n            this._previousHostParent = this._host.parentElement;\n\n            this._previousHostParent.removeChild(this._host);\n          }\n\n          subscription.unsubscribe();\n        }\n      });\n    });\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/**\n * Class to be added to the overlay bounding box.\n * @type {?}\n */\n\n\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\nclass FlexibleConnectedPositionStrategy {\n  /**\n   * @param {?} connectedTo\n   * @param {?} _viewportRuler\n   * @param {?} _document\n   * @param {?=} _platform\n   * @param {?=} _overlayContainer\n   */\n  constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /**\n     * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n     */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /**\n     * Whether the overlay was pushed in a previous positioning.\n     */\n\n    this._isPushed = false;\n    /**\n     * Whether the overlay can be pushed on-screen on the initial open.\n     */\n\n    this._canPush = true;\n    /**\n     * Whether the overlay can grow via flexible width/height after the initial open.\n     */\n\n    this._growAfterOpen = false;\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     */\n\n    this._hasFlexibleDimensions = true;\n    /**\n     * Whether the overlay position is locked.\n     */\n\n    this._positionLocked = false;\n    /**\n     * Amount of space that must be maintained between the overlay and the edge of the viewport.\n     */\n\n    this._viewportMargin = 0;\n    /**\n     * The Scrollable containers used to check scrollable view properties on position change.\n     */\n\n    this.scrollables = [];\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     */\n\n    this._preferredPositions = [];\n    /**\n     * Subject that emits whenever the position changes.\n     */\n\n    this._positionChanges = new Subject();\n    /**\n     * Subscription to viewport size changes.\n     */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /**\n     * Default offset for the overlay along the x axis.\n     */\n\n    this._offsetX = 0;\n    /**\n     * Default offset for the overlay along the y axis.\n     */\n\n    this._offsetY = 0;\n    /**\n     * Amount of subscribers to the `positionChanges` stream.\n     */\n\n    this._positionChangeSubscriptions = 0;\n    /**\n     * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n     */\n\n    this._appliedPanelClasses = [];\n    /**\n     * Observable sequence of position changes.\n     */\n\n    this.positionChanges = new Observable(observer => {\n      /** @type {?} */\n      const subscription = this._positionChanges.subscribe(observer);\n\n      this._positionChangeSubscriptions++;\n      return () => {\n        subscription.unsubscribe();\n        this._positionChangeSubscriptions--;\n      };\n    });\n    this.setOrigin(connectedTo);\n  }\n  /**\n   * Ordered list of preferred positions, from most to least desirable.\n   * @return {?}\n   */\n\n\n  get positions() {\n    return this._preferredPositions;\n  }\n  /**\n   * Attaches this position strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n\n    this._resizeSubscription.unsubscribe();\n\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  apply() {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n    if (this._isDisposed || this._platform && !this._platform.isBrowser) {\n      return;\n    } // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n\n\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n\n    this._resetOverlayElementStyles();\n\n    this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n\n\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    /** @type {?} */\n\n    const originRect = this._originRect;\n    /** @type {?} */\n\n    const overlayRect = this._overlayRect;\n    /** @type {?} */\n\n    const viewportRect = this._viewportRect; // Positions where the overlay will fit with flexible dimensions.\n\n    /** @type {?} */\n\n    const flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.\n\n    /** @type {?} */\n\n    let fallback; // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n\n      /** @type {?} */\n      let originPoint = this._getOriginPoint(originRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n\n      /** @type {?} */\n\n\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.\n\n      /** @type {?} */\n\n\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n\n        this._applyPosition(pos, originPoint);\n\n        return;\n      } // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n\n\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n        continue;\n      } // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n\n\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {\n          overlayFit,\n          overlayPoint,\n          originPoint,\n          position: pos,\n          overlayRect\n        };\n      }\n    } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n\n\n    if (flexibleFits.length) {\n      /** @type {?} */\n      let bestFit = null;\n      /** @type {?} */\n\n      let bestScore = -1;\n\n      for (const fit of flexibleFits) {\n        /** @type {?} */\n        const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n\n      this._applyPosition(\n      /** @type {?} */\n      bestFit.position,\n      /** @type {?} */\n      bestFit.origin);\n\n      return;\n    } // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n\n\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n\n      this._applyPosition(\n      /** @type {?} */\n      fallback.position,\n      /** @type {?} */\n      fallback.originPoint);\n\n      return;\n    } // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n\n\n    this._applyPosition(\n    /** @type {?} */\n    fallback.position,\n    /** @type {?} */\n    fallback.originPoint);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  detach() {\n    this._clearPanelClasses();\n\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n\n    this._resizeSubscription.unsubscribe();\n  }\n  /**\n   * Cleanup after the element gets destroyed.\n   * @return {?}\n   */\n\n\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    } // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n\n\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style,\n      /** @type {?} */\n      {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n\n    this._positionChanges.complete();\n\n    this._overlayRef = this._boundingBox =\n    /** @type {?} */\n    null;\n    this._isDisposed = true;\n  }\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   * @return {?}\n   */\n\n\n  reapplyLastPosition() {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      /** @type {?} */\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      /** @type {?} */\n\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} scrollables\n   * @return {THIS}\n   */\n\n\n  withScrollableContainers(scrollables) {\n    /** @type {?} */\n    this.scrollables = scrollables;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Adds new preferred positions.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} positions List of positions options for this overlay.\n   * @return {THIS}\n   */\n\n\n  withPositions(positions) {\n    /** @type {?} */\n    this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n    if (positions.indexOf(\n    /** @type {?} */\n\n    /** @type {?} */\n    this._lastPosition) === -1) {\n      /** @type {?} */\n      this._lastPosition = null;\n    }\n\n    /** @type {?} */\n    this._validatePositions();\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n   * @return {THIS}\n   */\n\n\n  withViewportMargin(margin) {\n    /** @type {?} */\n    this._viewportMargin = margin;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} flexibleDimensions\n   * @return {THIS}\n   */\n\n\n  withFlexibleDimensions(flexibleDimensions = true) {\n    /** @type {?} */\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets whether the overlay can grow after the initial open via flexible width/height.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} growAfterOpen\n   * @return {THIS}\n   */\n\n\n  withGrowAfterOpen(growAfterOpen = true) {\n    /** @type {?} */\n    this._growAfterOpen = growAfterOpen;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} canPush\n   * @return {THIS}\n   */\n\n\n  withPush(canPush = true) {\n    /** @type {?} */\n    this._canPush = canPush;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} isLocked Whether the overlay should locked in.\n   * @return {THIS}\n   */\n\n\n  withLockedPosition(isLocked = true) {\n    /** @type {?} */\n    this._positionLocked = isLocked;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} origin Reference to the new origin.\n   * @return {THIS}\n   */\n\n\n  setOrigin(origin) {\n    /** @type {?} */\n    this._origin = origin;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} offset New offset in the X axis.\n   * @return {THIS}\n   */\n\n\n  withDefaultOffsetX(offset) {\n    /** @type {?} */\n    this._offsetX = offset;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} offset New offset in the Y axis.\n   * @return {THIS}\n   */\n\n\n  withDefaultOffsetY(offset) {\n    /** @type {?} */\n    this._offsetY = offset;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   * @return {THIS}\n   */\n\n\n  withTransformOriginOn(selector) {\n    /** @type {?} */\n    this._transformOriginSelector = selector;\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   * @private\n   * @param {?} originRect\n   * @param {?} pos\n   * @return {?}\n   */\n\n\n  _getOriginPoint(originRect, pos) {\n    /** @type {?} */\n    let x;\n\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      /** @type {?} */\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      /** @type {?} */\n\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n    /** @type {?} */\n\n\n    let y;\n\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   * @private\n   * @param {?} originPoint\n   * @param {?} overlayRect\n   * @param {?} pos\n   * @return {?}\n   */\n\n\n  _getOverlayPoint(originPoint, overlayRect, pos) {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n\n    /** @type {?} */\n    let overlayStartX;\n\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n    /** @type {?} */\n\n\n    let overlayStartY;\n\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    } // The (x, y) coordinates of the overlay.\n\n\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY\n    };\n  }\n  /**\n   * Gets how well an overlay at the given point will fit within the viewport.\n   * @private\n   * @param {?} point\n   * @param {?} overlay\n   * @param {?} viewport\n   * @param {?} position\n   * @return {?}\n   */\n\n\n  _getOverlayFit(point, overlay, viewport, position) {\n    let {\n      x,\n      y\n    } = point;\n    /** @type {?} */\n\n    let offsetX = this._getOffset(position, 'x');\n    /** @type {?} */\n\n\n    let offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    } // How much the overlay would overflow at this position, on each side.\n\n    /** @type {?} */\n\n\n    let leftOverflow = 0 - x;\n    /** @type {?} */\n\n    let rightOverflow = x + overlay.width - viewport.width;\n    /** @type {?} */\n\n    let topOverflow = 0 - y;\n    /** @type {?} */\n\n    let bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.\n\n    /** @type {?} */\n\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    /** @type {?} */\n\n\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    /** @type {?} */\n\n\n    let visibleArea = visibleWidth * visibleHeight;\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width\n    };\n  }\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @private\n   * @param {?} fit How well the overlay fits in the viewport at some position.\n   * @param {?} point The (x, y) coordinates of the overlat at some position.\n   * @param {?} viewport The geometry of the viewport.\n   * @return {?}\n   */\n\n\n  _canFitWithFlexibleDimensions(fit, point, viewport) {\n    if (this._hasFlexibleDimensions) {\n      /** @type {?} */\n      const availableHeight = viewport.bottom - point.y;\n      /** @type {?} */\n\n      const availableWidth = viewport.right - point.x;\n      /** @type {?} */\n\n      const minHeight = this._overlayRef.getConfig().minHeight;\n      /** @type {?} */\n\n\n      const minWidth = this._overlayRef.getConfig().minWidth;\n      /** @type {?} */\n\n\n      const verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n      /** @type {?} */\n\n      const horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n      return verticalFit && horizontalFit;\n    }\n  }\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @private\n   * @param {?} start Starting point from which the overlay is pushed.\n   * @param {?} overlay Dimensions of the overlay.\n   * @param {?} scrollPosition Current viewport scroll position.\n   * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n\n\n  _pushOverlayOnScreen(start, overlay, scrollPosition) {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n    /** @type {?} */\n\n\n    const viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n\n    /** @type {?} */\n\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    /** @type {?} */\n\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    /** @type {?} */\n\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    /** @type {?} */\n\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.\n\n    /** @type {?} */\n\n    let pushX = 0;\n    /** @type {?} */\n\n    let pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n\n    this._previousPushAmount = {\n      x: pushX,\n      y: pushY\n    };\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY\n    };\n  }\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @private\n   * @param {?} position The position preference\n   * @param {?} originPoint The point on the origin element where the overlay is connected.\n   * @return {?}\n   */\n\n\n  _applyPosition(position, originPoint) {\n    this._setTransformOrigin(position);\n\n    this._setOverlayElementStyles(originPoint, position);\n\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    } // Save the last connected position in case the position needs to be re-calculated.\n\n\n    this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n\n    if (this._positionChangeSubscriptions > 0) {\n      /** @type {?} */\n      const scrollableViewProperties = this._getScrollVisibility();\n      /** @type {?} */\n\n\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n  /**\n   * Sets the transform origin based on the configured selector and the passed-in position.\n   * @private\n   * @param {?} position\n   * @return {?}\n   */\n\n\n  _setTransformOrigin(position) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const elements =\n    /** @type {?} */\n    this._boundingBox.querySelectorAll(this._transformOriginSelector);\n    /** @type {?} */\n\n\n    let xOrigin;\n    /** @type {?} */\n\n    let yOrigin = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   * @private\n   * @param {?} origin\n   * @param {?} position\n   * @return {?}\n   */\n\n\n  _calculateBoundingBoxRect(origin, position) {\n    /** @type {?} */\n    const viewport = this._viewportRect;\n    /** @type {?} */\n\n    const isRtl = this._isRtl();\n    /** @type {?} */\n\n\n    let height;\n    /** @type {?} */\n\n    let top;\n    /** @type {?} */\n\n    let bottom;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n\n      /** @type {?} */\n      const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n      /** @type {?} */\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    } // The overlay is opening 'right-ward' (the content flows to the right).\n\n    /** @type {?} */\n\n\n    const isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).\n\n    /** @type {?} */\n\n    const isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n    /** @type {?} */\n\n    let width;\n    /** @type {?} */\n\n    let left;\n    /** @type {?} */\n\n    let right;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.right - origin.x + this._viewportMargin;\n      width = origin.x - viewport.left;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n\n      /** @type {?} */\n      const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      /** @type {?} */\n\n      const previousWidth = this._lastBoundingBoxSize.width;\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n\n    return {\n      top:\n      /** @type {?} */\n      top,\n      left:\n      /** @type {?} */\n      left,\n      bottom:\n      /** @type {?} */\n      bottom,\n      right:\n      /** @type {?} */\n      right,\n      width,\n      height\n    };\n  }\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @private\n   * @param {?} origin The point on the origin element where the overlay is connected.\n   * @param {?} position The position preference\n   * @return {?}\n   */\n\n\n  _setBoundingBoxStyles(origin, position) {\n    /** @type {?} */\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n\n\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n    /** @type {?} */\n\n\n    const styles =\n    /** @type {?} */\n    {};\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = '';\n      styles.width = styles.height = '100%';\n    } else {\n      /** @type {?} */\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      /** @type {?} */\n\n\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n    extendStyles(\n    /** @type {?} */\n    this._boundingBox.style, styles);\n  }\n  /**\n   * Resets the styles for the bounding box so that a new positioning can be computed.\n   * @private\n   * @return {?}\n   */\n\n\n  _resetBoundingBoxStyles() {\n    extendStyles(\n    /** @type {?} */\n    this._boundingBox.style,\n    /** @type {?} */\n    {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: ''\n    });\n  }\n  /**\n   * Resets the styles for the overlay pane so that a new positioning can be computed.\n   * @private\n   * @return {?}\n   */\n\n\n  _resetOverlayElementStyles() {\n    extendStyles(this._pane.style,\n    /** @type {?} */\n    {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: ''\n    });\n  }\n  /**\n   * Sets positioning styles to the overlay element.\n   * @private\n   * @param {?} originPoint\n   * @param {?} position\n   * @return {?}\n   */\n\n\n  _setOverlayElementStyles(originPoint, position) {\n    /** @type {?} */\n    const styles =\n    /** @type {?} */\n    {};\n\n    if (this._hasExactPosition()) {\n      /** @type {?} */\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    } // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n\n    /** @type {?} */\n\n\n    let transformString = '';\n    /** @type {?} */\n\n    let offsetX = this._getOffset(position, 'x');\n    /** @type {?} */\n\n\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n      styles.maxHeight = '';\n    }\n\n    if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n      styles.maxWidth = '';\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n  /**\n   * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n   * @private\n   * @param {?} position\n   * @param {?} originPoint\n   * @param {?} scrollPosition\n   * @return {?}\n   */\n\n\n  _getExactOverlayY(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n\n    /** @type {?} */\n    let styles =\n    /** @type {?} */\n    {\n      top: null,\n      bottom: null\n    };\n    /** @type {?} */\n\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    } // @breaking-change 8.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n    // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n    // a required parameter.\n\n    /** @type {?} */\n\n\n    let virtualKeyboardOffset = this._overlayContainer ? this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n\n    overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n\n      /** @type {?} */\n      const documentHeight =\n      /** @type {?} */\n      this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n  /**\n   * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n   * @private\n   * @param {?} position\n   * @param {?} originPoint\n   * @param {?} scrollPosition\n   * @return {?}\n   */\n\n\n  _getExactOverlayX(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n\n    /** @type {?} */\n    let styles =\n    /** @type {?} */\n    {\n      left: null,\n      right: null\n    };\n    /** @type {?} */\n\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    } // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n\n    /** @type {?} */\n\n\n    let horizontalStyleProperty;\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    } // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n\n\n    if (horizontalStyleProperty === 'right') {\n      /** @type {?} */\n      const documentWidth =\n      /** @type {?} */\n      this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   * @private\n   * @return {?}\n   */\n\n\n  _getScrollVisibility() {\n    // Note: needs fresh rects since the position could've changed.\n\n    /** @type {?} */\n    const originBounds = this._getOriginRect();\n    /** @type {?} */\n\n\n    const overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n\n    /** @type {?} */\n\n\n    const scrollContainerBounds = this.scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n    };\n  }\n  /**\n   * Subtracts the amount that an element is overflowing on an axis from it's length.\n   * @private\n   * @param {?} length\n   * @param {...?} overflows\n   * @return {?}\n   */\n\n\n  _subtractOverflows(length, ...overflows) {\n    return overflows.reduce((currentValue, currentOverflow) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n  /**\n   * Narrows the given viewport rect by the current _viewportMargin.\n   * @private\n   * @return {?}\n   */\n\n\n  _getNarrowedViewportRect() {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n\n    /** @type {?} */\n    const width =\n    /** @type {?} */\n    this._document.documentElement.clientWidth;\n    /** @type {?} */\n\n    const height =\n    /** @type {?} */\n    this._document.documentElement.clientHeight;\n    /** @type {?} */\n\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin\n    };\n  }\n  /**\n   * Whether the we're dealing with an RTL context\n   * @private\n   * @return {?}\n   */\n\n\n  _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n  /**\n   * Determines whether the overlay uses exact or flexible positioning.\n   * @private\n   * @return {?}\n   */\n\n\n  _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n  /**\n   * Retrieves the offset of a position along the x or y axis.\n   * @private\n   * @param {?} position\n   * @param {?} axis\n   * @return {?}\n   */\n\n\n  _getOffset(position, axis) {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n  /**\n   * Validates that the current position match the expected values.\n   * @private\n   * @return {?}\n   */\n\n\n  _validatePositions() {\n    if (!this._preferredPositions.length) {\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n    } // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n\n\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n  /**\n   * Adds a single CSS class or an array of classes on the overlay panel.\n   * @private\n   * @param {?} cssClasses\n   * @return {?}\n   */\n\n\n  _addPanelClasses(cssClasses) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n  /**\n   * Clears the classes that the position strategy has applied from the overlay panel.\n   * @private\n   * @return {?}\n   */\n\n\n  _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => this._pane.classList.remove(cssClass));\n\n      this._appliedPanelClasses = [];\n    }\n  }\n  /**\n   * Returns the ClientRect of the current origin.\n   * @private\n   * @return {?}\n   */\n\n\n  _getOriginRect() {\n    /** @type {?} */\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n\n    if (origin instanceof HTMLElement) {\n      return origin.getBoundingClientRect();\n    } // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n\n\n    return {\n      top: origin.y,\n      bottom: origin.y,\n      left: origin.x,\n      right: origin.x,\n      height: 0,\n      width: 0\n    };\n  }\n\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\n\n\nfunction extendStyles(dest, source) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\n\n\nclass ConnectedPositionStrategy {\n  /**\n   * @param {?} originPos\n   * @param {?} overlayPos\n   * @param {?} connectedTo\n   * @param {?} viewportRuler\n   * @param {?} document\n   * @param {?=} platform\n   */\n  constructor(originPos, overlayPos, connectedTo, viewportRuler, document, // @breaking-change 8.0.0 `platform` parameter to be made required.\n  platform) {\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     */\n    this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n  /**\n   * Whether the we're dealing with an RTL context\n   * @return {?}\n   */\n\n\n  get _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n  /**\n   * Emits an event when the connection point changes.\n   * @return {?}\n   */\n\n\n  get onPositionChange() {\n    return this._positionStrategy.positionChanges;\n  }\n  /**\n   * Ordered list of preferred positions, from most to least desirable.\n   * @return {?}\n   */\n\n\n  get positions() {\n    return this._preferredPositions;\n  }\n  /**\n   * Attach this position strategy to an overlay.\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  attach(overlayRef) {\n    this._overlayRef = overlayRef;\n\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n  /**\n   * Disposes all resources used by the position strategy.\n   * @return {?}\n   */\n\n\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n  /**\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  detach() {\n    this._positionStrategy.detach();\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  apply() {\n    this._positionStrategy.apply();\n  }\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   * @return {?}\n   */\n\n\n  recalculateLastPosition() {\n    this._positionStrategy.reapplyLastPosition();\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   * @param {?} scrollables\n   * @return {?}\n   */\n\n\n  withScrollableContainers(scrollables) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n  /**\n   * Adds a new preferred fallback position.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} originPos\n   * @param {?} overlayPos\n   * @param {?=} offsetX\n   * @param {?=} offsetY\n   * @return {THIS}\n   */\n\n\n  withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n    /** @type {?} */\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n\n    /** @type {?} */\n    this._preferredPositions.push(position);\n\n    /** @type {?} */\n    this._positionStrategy.withPositions(\n    /** @type {?} */\n    this._preferredPositions);\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} dir New layout direction.\n   * @return {THIS}\n   */\n\n\n  withDirection(dir) {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (\n    /** @type {?} */\n    this._overlayRef) {\n      /** @type {?} */\n      this._overlayRef.setDirection(dir);\n    } else {\n      /** @type {?} */\n      this._direction = dir;\n    }\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @template THIS\n   * @this {THIS}\n   * @param {?} offset New offset in the X axis.\n   * @return {THIS}\n   */\n\n\n  withOffsetX(offset) {\n    /** @type {?} */\n    this._positionStrategy.withDefaultOffsetX(offset);\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @template THIS\n   * @this {THIS}\n   * @param {?} offset New offset in the Y axis.\n   * @return {THIS}\n   */\n\n\n  withOffsetY(offset) {\n    /** @type {?} */\n    this._positionStrategy.withDefaultOffsetY(offset);\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @template THIS\n   * @this {THIS}\n   * @param {?} isLocked Whether the overlay should locked in.\n   * @return {THIS}\n   */\n\n\n  withLockedPosition(isLocked) {\n    /** @type {?} */\n    this._positionStrategy.withLockedPosition(isLocked);\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} positions Position pairs to be set on the strategy.\n   * @return {THIS}\n   */\n\n\n  withPositions(positions) {\n    /** @type {?} */\n    this._preferredPositions = positions.slice();\n\n    /** @type {?} */\n    this._positionStrategy.withPositions(\n    /** @type {?} */\n    this._preferredPositions);\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} origin Reference to the new origin element.\n   * @return {THIS}\n   */\n\n\n  setOrigin(origin) {\n    /** @type {?} */\n    this._positionStrategy.setOrigin(origin);\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class to be added to the overlay pane wrapper.\n * @type {?}\n */\n\n\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\nclass GlobalPositionStrategy {\n  constructor() {\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._leftOffset = '';\n    this._rightOffset = '';\n    this._alignItems = '';\n    this._justifyContent = '';\n    this._width = '';\n    this._height = '';\n  }\n  /**\n   * @param {?} overlayRef\n   * @return {?}\n   */\n\n\n  attach(overlayRef) {\n    /** @type {?} */\n    const config = overlayRef.getConfig();\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({\n        width: this._width\n      });\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({\n        height: this._height\n      });\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} value New top offset.\n   * @return {THIS}\n   */\n\n\n  top(value = '') {\n    /** @type {?} */\n    this._bottomOffset = '';\n\n    /** @type {?} */\n    this._topOffset = value;\n\n    /** @type {?} */\n    this._alignItems = 'flex-start';\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} value New left offset.\n   * @return {THIS}\n   */\n\n\n  left(value = '') {\n    /** @type {?} */\n    this._rightOffset = '';\n\n    /** @type {?} */\n    this._leftOffset = value;\n\n    /** @type {?} */\n    this._justifyContent = 'flex-start';\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} value New bottom offset.\n   * @return {THIS}\n   */\n\n\n  bottom(value = '') {\n    /** @type {?} */\n    this._topOffset = '';\n\n    /** @type {?} */\n    this._bottomOffset = value;\n\n    /** @type {?} */\n    this._alignItems = 'flex-end';\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} value New right offset.\n   * @return {THIS}\n   */\n\n\n  right(value = '') {\n    /** @type {?} */\n    this._leftOffset = '';\n\n    /** @type {?} */\n    this._rightOffset = value;\n\n    /** @type {?} */\n    this._justifyContent = 'flex-end';\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * \\@breaking-change 8.0.0\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} value New width for the overlay\n   * @return {THIS}\n   */\n\n\n  width(value = '') {\n    if (\n    /** @type {?} */\n    this._overlayRef) {\n      /** @type {?} */\n      this._overlayRef.updateSize({\n        width: value\n      });\n    } else {\n      /** @type {?} */\n      this._width = value;\n    }\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * \\@breaking-change 8.0.0\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} value New height for the overlay\n   * @return {THIS}\n   */\n\n\n  height(value = '') {\n    if (\n    /** @type {?} */\n    this._overlayRef) {\n      /** @type {?} */\n      this._overlayRef.updateSize({\n        height: value\n      });\n    } else {\n      /** @type {?} */\n      this._height = value;\n    }\n\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} offset Overlay offset from the horizontal center.\n   * @return {THIS}\n   */\n\n\n  centerHorizontally(offset = '') {\n    /** @type {?} */\n    this.left(offset);\n\n    /** @type {?} */\n    this._justifyContent = 'center';\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @template THIS\n   * @this {THIS}\n   * @param {?=} offset Overlay offset from the vertical center.\n   * @return {THIS}\n   */\n\n\n  centerVertically(offset = '') {\n    /** @type {?} */\n    this.top(offset);\n\n    /** @type {?} */\n    this._alignItems = 'center';\n    return (\n      /** @type {?} */\n      this\n    );\n  }\n  /**\n   * Apply the position to the element.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  apply() {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const styles = this._overlayRef.overlayElement.style;\n    /** @type {?} */\n\n    const parentStyles = this._overlayRef.hostElement.style;\n    /** @type {?} */\n\n    const config = this._overlayRef.getConfig();\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n    styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (config.width === '100%') {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n  }\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  dispose() {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const styles = this._overlayRef.overlayElement.style;\n    /** @type {?} */\n\n    const parent = this._overlayRef.hostElement;\n    /** @type {?} */\n\n    const parentStyles = parent.style;\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n    this._overlayRef =\n    /** @type {?} */\n    null;\n    this._isDisposed = true;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Builder for overlay position strategy.\n */\n\n\nclass OverlayPositionBuilder {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} _document\n   * @param {?=} _platform\n   * @param {?=} _overlayContainer\n   */\n  constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   * @return {?}\n   */\n\n\n  global() {\n    return new GlobalPositionStrategy();\n  }\n  /**\n   * Creates a relative position strategy.\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * \\@breaking-change 8.0.0\n   * @param {?} elementRef\n   * @param {?} originPos\n   * @param {?} overlayPos\n   * @return {?}\n   */\n\n\n  connectedTo(elementRef, originPos, overlayPos) {\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n  }\n  /**\n   * Creates a flexible position strategy.\n   * @param {?} origin Origin relative to which to position the overlay.\n   * @return {?}\n   */\n\n\n  flexibleConnectedTo(origin) {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n  }\n\n}\n\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform, 8), ɵngcc0.ɵɵinject(OverlayContainer, 8));\n};\n\nOverlayPositionBuilder.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: OverlayPositionBuilder,\n  factory: OverlayPositionBuilder.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nOverlayPositionBuilder.ctorParameters = () => [{\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: OverlayContainer,\n  decorators: [{\n    type: Optional\n  }]\n}];\n/** @nocollapse */\n\n\nOverlayPositionBuilder.ngInjectableDef = defineInjectable({\n  factory: function OverlayPositionBuilder_Factory() {\n    return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8));\n  },\n  token: OverlayPositionBuilder,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: OverlayContainer,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Next overlay unique ID.\n * @type {?}\n */\n\n\nlet nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nclass Overlay {\n  /**\n   * @param {?} scrollStrategies\n   * @param {?} _overlayContainer\n   * @param {?} _componentFactoryResolver\n   * @param {?} _positionBuilder\n   * @param {?} _keyboardDispatcher\n   * @param {?} _injector\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?} _directionality\n   * @param {?=} _location\n   */\n  constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n  }\n  /**\n   * Creates an overlay.\n   * @param {?=} config Configuration applied to the overlay.\n   * @return {?} Reference to the created overlay.\n   */\n\n\n  create(config) {\n    /** @type {?} */\n    const host = this._createHostElement();\n    /** @type {?} */\n\n\n    const pane = this._createPaneElement(host);\n    /** @type {?} */\n\n\n    const portalOutlet = this._createPortalOutlet(pane);\n    /** @type {?} */\n\n\n    const overlayConfig = new OverlayConfig(config);\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n  }\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @return {?} An overlay position builder.\n   */\n\n\n  position() {\n    return this._positionBuilder;\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @private\n   * @param {?} host\n   * @return {?} Newly-created pane element\n   */\n\n\n  _createPaneElement(host) {\n    /** @type {?} */\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n    return pane;\n  }\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @private\n   * @return {?} Newly-create host element.\n   */\n\n\n  _createHostElement() {\n    /** @type {?} */\n    const host = this._document.createElement('div');\n\n    this._overlayContainer.getContainerElement().appendChild(host);\n\n    return host;\n  }\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @private\n   * @param {?} pane The DOM element to turn into a portal outlet.\n   * @return {?} A portal outlet for the given DOM element.\n   */\n\n\n  _createPortalOutlet(pane) {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n\n}\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8));\n};\n\nOverlay.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac\n});\n/** @nocollapse */\n\nOverlay.ctorParameters = () => [{\n  type: ScrollStrategyOptions\n}, {\n  type: OverlayContainer\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: OverlayPositionBuilder\n}, {\n  type: OverlayKeyboardDispatcher\n}, {\n  type: Injector\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Directionality\n}, {\n  type: Location,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc3.Directionality\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n * @type {?}\n */\n\n\nconst defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n * @type {?}\n */\n\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nclass CdkOverlayOrigin {\n  /**\n   * @param {?} elementRef\n   */\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n  }\n\n}\n\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"]\n});\n/** @nocollapse */\n\nCdkOverlayOrigin.ctorParameters = () => [{\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nclass CdkConnectedOverlay {\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  /**\n   * @param {?} _overlay\n   * @param {?} templateRef\n   * @param {?} viewContainerRef\n   * @param {?} scrollStrategyFactory\n   * @param {?} _dir\n   */\n  constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    /**\n     * Margin between the overlay and the viewport edges.\n     */\n\n    this.viewportMargin = 0;\n    /**\n     * Whether the overlay is open.\n     */\n\n    this.open = false;\n    /**\n     * Event emitted when the backdrop is clicked.\n     */\n\n    this.backdropClick = new EventEmitter();\n    /**\n     * Event emitted when the position has changed.\n     */\n\n    this.positionChange = new EventEmitter();\n    /**\n     * Event emitted when the overlay has been attached.\n     */\n\n    this.attach = new EventEmitter();\n    /**\n     * Event emitted when the overlay has been detached.\n     */\n\n    this.detach = new EventEmitter();\n    /**\n     * Emits when there are keyboard events that are targeted at the overlay.\n     */\n\n    this.overlayKeydown = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n  /**\n   * The offset in pixels for the overlay connection point on the x-axis\n   * @return {?}\n   */\n\n\n  get offsetX() {\n    return this._offsetX;\n  }\n  /**\n   * @param {?} offsetX\n   * @return {?}\n   */\n\n\n  set offsetX(offsetX) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n  /**\n   * The offset in pixels for the overlay connection point on the y-axis\n   * @return {?}\n   */\n\n\n  get offsetY() {\n    return this._offsetY;\n  }\n  /**\n   * @param {?} offsetY\n   * @return {?}\n   */\n\n\n  set offsetY(offsetY) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n  /**\n   * Whether or not the overlay should attach a backdrop.\n   * @return {?}\n   */\n\n\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether or not the overlay should be locked when scrolling.\n   * @return {?}\n   */\n\n\n  get lockPosition() {\n    return this._lockPosition;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set lockPosition(value) {\n    this._lockPosition = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the overlay's width and height can be constrained to fit within the viewport.\n   * @return {?}\n   */\n\n\n  get flexibleDimensions() {\n    return this._flexibleDimensions;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set flexibleDimensions(value) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n   * @return {?}\n   */\n\n\n  get growAfterOpen() {\n    return this._growAfterOpen;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set growAfterOpen(value) {\n    this._growAfterOpen = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n   * @return {?}\n   */\n\n\n  get push() {\n    return this._push;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set push(value) {\n    this._push = coerceBooleanProperty(value);\n  }\n  /**\n   * The associated overlay reference.\n   * @return {?}\n   */\n\n\n  get overlayRef() {\n    return this._overlayRef;\n  }\n  /**\n   * The element's layout direction.\n   * @return {?}\n   */\n\n\n  get dir() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n  /**\n   * Creates an overlay\n   * @private\n   * @return {?}\n   */\n\n\n  _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n\n    this._overlayRef.keydownEvents().subscribe(event => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\n  /**\n   * Builds the overlay config based on the directive's inputs\n   * @private\n   * @return {?}\n   */\n\n\n  _buildConfig() {\n    /** @type {?} */\n    const positionStrategy = this._position = this._createPositionStrategy();\n    /** @type {?} */\n\n\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n  /**\n   * Updates the state of a position strategy, based on the values of the directive inputs.\n   * @private\n   * @param {?} positionStrategy\n   * @return {?}\n   */\n\n\n  _updatePositionStrategy(positionStrategy) {\n    /** @type {?} */\n    const positions = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY\n    }));\n    return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition);\n  }\n  /**\n   * Returns the position strategy of the overlay to be set on the overlay config\n   * @private\n   * @return {?}\n   */\n\n\n  _createPositionStrategy() {\n    /** @type {?} */\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n    this._updatePositionStrategy(strategy);\n\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n    return strategy;\n  }\n  /**\n   * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n   * @private\n   * @return {?}\n   */\n\n\n  _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n  }\n  /**\n   * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n   * @private\n   * @return {?}\n   */\n\n\n  _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n}\n\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n    panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nCdkConnectedOverlay.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: TemplateRef\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\nCdkConnectedOverlay.propDecorators = {\n  origin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOrigin']\n  }],\n  positions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositions']\n  }],\n  offsetX: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetX']\n  }],\n  offsetY: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetY']\n  }],\n  width: [{\n    type: Input,\n    args: ['cdkConnectedOverlayWidth']\n  }],\n  height: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHeight']\n  }],\n  minWidth: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinWidth']\n  }],\n  minHeight: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinHeight']\n  }],\n  backdropClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayBackdropClass']\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPanelClass']\n  }],\n  viewportMargin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayViewportMargin']\n  }],\n  scrollStrategy: [{\n    type: Input,\n    args: ['cdkConnectedOverlayScrollStrategy']\n  }],\n  open: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOpen']\n  }],\n  hasBackdrop: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHasBackdrop']\n  }],\n  lockPosition: [{\n    type: Input,\n    args: ['cdkConnectedOverlayLockPosition']\n  }],\n  flexibleDimensions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayFlexibleDimensions']\n  }],\n  growAfterOpen: [{\n    type: Input,\n    args: ['cdkConnectedOverlayGrowAfterOpen']\n  }],\n  push: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPush']\n  }],\n  backdropClick: [{\n    type: Output\n  }],\n  positionChange: [{\n    type: Output\n  }],\n  attach: [{\n    type: Output\n  }],\n  detach: [{\n    type: Output\n  }],\n  overlayKeydown: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay'\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }]\n  });\n})();\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nclass OverlayModule {}\n\nOverlayModule.ɵfac = function OverlayModule_Factory(t) {\n  return new (t || OverlayModule)();\n};\n\nOverlayModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, {\n    declarations: function () {\n      return [CdkConnectedOverlay, CdkOverlayOrigin];\n    },\n    imports: function () {\n      return [BidiModule, PortalModule, ScrollingModule];\n    },\n    exports: function () {\n      return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule];\n    }\n  });\n})();\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\n\nconst OVERLAY_PROVIDERS = [Overlay, OverlayPositionBuilder, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, OVERLAY_CONTAINER_PROVIDER, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\nclass FullscreenOverlayContainer extends OverlayContainer {\n  /**\n   * @param {?} _document\n   */\n  constructor(_document) {\n    super(_document);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n  /**\n   * @protected\n   * @return {?}\n   */\n\n\n  _createContainer() {\n    super._createContainer();\n\n    this._adjustParentForFullscreenChange();\n\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _adjustParentForFullscreenChange() {\n    if (!this._containerElement) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const fullscreenElement = this.getFullscreenElement();\n    /** @type {?} */\n\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n  /**\n   * @private\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  _addFullscreenChangeListener(fn) {\n    /** @type {?} */\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n\n      this._fullScreenListener = fn;\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _getEventName() {\n    if (!this._fullScreenEventName) {\n      if (this._document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (this._document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (\n      /** @type {?} */\n      this._document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (\n      /** @type {?} */\n      this._document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   * @return {?}\n   */\n\n\n  getFullscreenElement() {\n    return this._document.fullscreenElement || this._document.webkitFullscreenElement ||\n    /** @type {?} */\n    this._document.mozFullScreenElement ||\n    /** @type {?} */\n    this._document.msFullscreenElement || null;\n  }\n\n}\n\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFullscreenOverlayContainer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FullscreenOverlayContainer,\n  factory: FullscreenOverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nFullscreenOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\n\n\nFullscreenOverlayContainer.ngInjectableDef = defineInjectable({\n  factory: function FullscreenOverlayContainer_Factory() {\n    return new FullscreenOverlayContainer(inject(DOCUMENT));\n  },\n  token: FullscreenOverlayContainer,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };","map":{"version":3,"names":["coerceCssPixelValue","coerceArray","coerceBooleanProperty","ScrollDispatcher","ViewportRuler","ScrollingModule","VIEWPORT_RULER_PROVIDER","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","CdkScrollable","DOCUMENT","Location","Inject","Injectable","NgZone","Optional","NgModule","SkipSelf","ApplicationRef","ComponentFactoryResolver","Injector","ElementRef","Directive","EventEmitter","InjectionToken","Input","Output","TemplateRef","ViewContainerRef","defineInjectable","inject","Observable","Subject","merge","Subscription","take","takeUntil","Platform","Directionality","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","ESCAPE","BlockScrollStrategy","constructor","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","disable","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","ScrollStrategyOptions_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","undefined","decorators","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","Object","keys","forEach","k","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","length","_keydownEventSubscriptions","_keydownEvents","next","ngOnDestroy","_isAttached","addEventListener","push","index","indexOf","splice","removeEventListener","OverlayKeyboardDispatcher_Factory","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","provide","deps","useFactory","OverlayContainer","_containerElement","parentNode","removeChild","getContainerElement","_createContainer","container","createElement","appendChild","OverlayContainer_Factory","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","OVERLAY_CONTAINER_PROVIDER","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_keydownEventsObservable","observer","subscription","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","setAttribute","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","children","boundingBoxClass","FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_positionChangeSubscriptions","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","querySelectorAll","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","transform","_getExactOverlayY","_getExactOverlayX","transformString","trim","virtualKeyboardOffset","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","HTMLElement","dest","source","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","withFallbackPosition","onPositionChange","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","global","elementRef","flexibleConnectedTo","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","Overlay_Factory","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkOverlayOrigin_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","viewportMargin","open","positionChange","overlayKeydown","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","lockPosition","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","keyCode","_createPositionStrategy","currentPosition","p","emit","CdkConnectedOverlay_Factory","inputs","outputs","features","ɵɵNgOnChangesFeature","propDecorators","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","OverlayModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","OVERLAY_PROVIDERS","FullscreenOverlayContainer","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","ɵg","ɵf","ɵb","ɵa","ɵc","ɵe","ɵd"],"sources":["/Users/apple/Desktop/zepto/my_project/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/overlay.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} document\n     */\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    attach() { }\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    enable() {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            const root = (/** @type {?} */ (this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    disable() {\n        if (this._isEnabled) {\n            /** @type {?} */\n            const html = (/** @type {?} */ (this._document.documentElement));\n            /** @type {?} */\n            const body = (/** @type {?} */ (this._document.body));\n            /** @type {?} */\n            const htmlStyle = (/** @type {?} */ (html.style));\n            /** @type {?} */\n            const bodyStyle = (/** @type {?} */ (body.style));\n            /** @type {?} */\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        /** @type {?} */\n        const html = (/** @type {?} */ (this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        const body = this._document.body;\n        /** @type {?} */\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                /** @type {?} */\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > (/** @type {?} */ ((/** @type {?} */ (this._config)).threshold))) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nclass NoopScrollStrategy {\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    enable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    disable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    attach() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        /** @type {?} */\n        const outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        const outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        const outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        /** @type {?} */\n        const clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        const clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    /** @type {?} */\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    /** @type {?} */\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?} document\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /**\n         * Block scrolling.\n         */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ScrollStrategyOptions, factory: ScrollStrategyOptions.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = defineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nclass OverlayConfig {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            Object.keys(config).forEach(k => {\n                /** @type {?} */\n                const key = (/** @type {?} */ (k));\n                if (typeof config[key] !== 'undefined') {\n                    this[key] = config[key];\n                }\n            });\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nclass ConnectionPositionPair {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @param {?=} panelClass\n     */\n    constructor(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nclass ScrollingVisibility {\n}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nclass ConnectedOverlayPositionChange {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    constructor(connectionPair, scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/** @nocollapse */\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = (event) => {\n            /** @type {?} */\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    remove(overlayRef) {\n        /** @type {?} */\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @private\n     * @return {?}\n     */\n    _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OverlayKeyboardDispatcher, factory: OverlayKeyboardDispatcher.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(inject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        (/** @type {?} */ (\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nclass OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        this._document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @protected\n     * @return {?}\n     */\n    _createContainer() {\n        /** @type {?} */\n        const container = this._document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayContainer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OverlayContainer, factory: OverlayContainer.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayContainer.ngInjectableDef = defineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(inject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        (/** @type {?} */ (DOCUMENT))\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    /**\n     * @param {?} _portalOutlet\n     * @param {?} _host\n     * @param {?} _pane\n     * @param {?} _config\n     * @param {?} _ngZone\n     * @param {?} _keyboardDispatcher\n     * @param {?} _document\n     * @param {?=} _location\n     */\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._keydownEventsObservable = new Observable((observer) => {\n            /** @type {?} */\n            const subscription = this._keydownEvents.subscribe(observer);\n            this._keydownEventSubscriptions++;\n            return () => {\n                subscription.unsubscribe();\n                this._keydownEventSubscriptions--;\n            };\n        });\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /**\n     * The overlay's HTML element\n     * @return {?}\n     */\n    get overlayElement() {\n        return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    attach(portal) {\n        /** @type {?} */\n        let attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        /** @type {?} */\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        /** @type {?} */\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = (/** @type {?} */ (null));\n        }\n        this._previousHostParent = this._pane = (/** @type {?} */ (null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    updateSize(sizeConfig) {\n        this._config = Object.assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    setDirection(dir) {\n        this._config = Object.assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    getDirection() {\n        /** @type {?} */\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @private\n     * @return {?}\n     */\n    _updateElementSize() {\n        /** @type {?} */\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @private\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @private\n     * @return {?}\n     */\n    _attachBackdrop() {\n        /** @type {?} */\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        (/** @type {?} */ (this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', (event) => this._backdropClick.next(event));\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @private\n     * @return {?}\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            (/** @type {?} */ (this._host.parentNode)).appendChild(this._host);\n        }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    detachBackdrop() {\n        /** @type {?} */\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        /** @type {?} */\n        let timeoutId;\n        /** @type {?} */\n        let finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach && backdropToDetach.parentNode) {\n                backdropToDetach.parentNode.removeChild(backdropToDetach);\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses((/** @type {?} */ (backdropToDetach)), this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            (/** @type {?} */ (backdropToDetach)).addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @private\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _toggleClasses(element, cssClasses, isAdd) {\n        /** @type {?} */\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        });\n    }\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @private\n     * @return {?}\n     */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            /** @type {?} */\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/**\n * Class to be added to the overlay bounding box.\n * @type {?}\n */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /**\n     * @param {?} connectedTo\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?=} _platform\n     * @param {?=} _overlayContainer\n     */\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this.scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Amount of subscribers to the `positionChanges` stream.\n         */\n        this._positionChangeSubscriptions = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = new Observable((observer) => {\n            /** @type {?} */\n            const subscription = this._positionChanges.subscribe(observer);\n            this._positionChangeSubscriptions++;\n            return () => {\n                subscription.unsubscribe();\n                this._positionChangeSubscriptions--;\n            };\n        });\n        this.setOrigin(connectedTo);\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const originRect = this._originRect;\n        /** @type {?} */\n        const overlayRect = this._overlayRect;\n        /** @type {?} */\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        /** @type {?} */\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        /** @type {?} */\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            /** @type {?} */\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            /** @type {?} */\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            /** @type {?} */\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            let bestFit = null;\n            /** @type {?} */\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                /** @type {?} */\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition((/** @type {?} */ (bestFit)).position, (/** @type {?} */ (bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, (/** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            })));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} scrollables\n     * @return {THIS}\n     */\n    withScrollableContainers(scrollables) {\n        (/** @type {?} */ (this)).scrollables = scrollables;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Adds new preferred positions.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions List of positions options for this overlay.\n     * @return {THIS}\n     */\n    withPositions(positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf((/** @type {?} */ ((/** @type {?} */ (this))._lastPosition))) === -1) {\n            (/** @type {?} */ (this))._lastPosition = null;\n        }\n        (/** @type {?} */ (this))._validatePositions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {THIS}\n     */\n    withViewportMargin(margin) {\n        (/** @type {?} */ (this))._viewportMargin = margin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} flexibleDimensions\n     * @return {THIS}\n     */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        (/** @type {?} */ (this))._hasFlexibleDimensions = flexibleDimensions;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} growAfterOpen\n     * @return {THIS}\n     */\n    withGrowAfterOpen(growAfterOpen = true) {\n        (/** @type {?} */ (this))._growAfterOpen = growAfterOpen;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} canPush\n     * @return {THIS}\n     */\n    withPush(canPush = true) {\n        (/** @type {?} */ (this))._canPush = canPush;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    withLockedPosition(isLocked = true) {\n        (/** @type {?} */ (this))._positionLocked = isLocked;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin.\n     * @return {THIS}\n     */\n    setOrigin(origin) {\n        (/** @type {?} */ (this))._origin = origin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    withDefaultOffsetX(offset) {\n        (/** @type {?} */ (this))._offsetX = offset;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    withDefaultOffsetY(offset) {\n        (/** @type {?} */ (this))._offsetY = offset;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {THIS}\n     */\n    withTransformOriginOn(selector) {\n        (/** @type {?} */ (this))._transformOriginSelector = selector;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @private\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOriginPoint(originRect, pos) {\n        /** @type {?} */\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @private\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        /** @type {?} */\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @private\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        /** @type {?} */\n        let leftOverflow = 0 - x;\n        /** @type {?} */\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        let topOverflow = 0 - y;\n        /** @type {?} */\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        /** @type {?} */\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @private\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            const availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            const availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            /** @type {?} */\n            const minWidth = this._overlayRef.getConfig().minWidth;\n            /** @type {?} */\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @private\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        /** @type {?} */\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        /** @type {?} */\n        let pushX = 0;\n        /** @type {?} */\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @private\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            /** @type {?} */\n            const scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        const elements = (/** @type {?} */ (this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        let xOrigin;\n        /** @type {?} */\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @private\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        let height;\n        /** @type {?} */\n        let top;\n        /** @type {?} */\n        let bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        /** @type {?} */\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        /** @type {?} */\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        let width;\n        /** @type {?} */\n        let left;\n        /** @type {?} */\n        let right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: (/** @type {?} */ (top)), left: (/** @type {?} */ (left)), bottom: (/** @type {?} */ (bottom)), right: (/** @type {?} */ (right)), width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @private\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    _setBoundingBoxStyles(origin, position) {\n        /** @type {?} */\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        const styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    _resetBoundingBoxStyles() {\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, (/** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        })));\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, (/** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        })));\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @private\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    _setOverlayElementStyles(originPoint, position) {\n        /** @type {?} */\n        const styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            /** @type {?} */\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        /** @type {?} */\n        let transformString = '';\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        /** @type {?} */\n        let styles = (/** @type {?} */ ({ top: null, bottom: null }));\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // @breaking-change 8.0.0 Currently the `_overlayContainer` is optional in order to avoid a\n        // breaking change. The null check here can be removed once the `_overlayContainer` becomes\n        // a required parameter.\n        /** @type {?} */\n        let virtualKeyboardOffset = this._overlayContainer ?\n            this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            /** @type {?} */\n            const documentHeight = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        /** @type {?} */\n        let styles = (/** @type {?} */ ({ left: null, right: null }));\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        /** @type {?} */\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            const documentWidth = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @private\n     * @return {?}\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        /** @type {?} */\n        const originBounds = this._getOriginRect();\n        /** @type {?} */\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        /** @type {?} */\n        const scrollContainerBounds = this.scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @private\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @private\n     * @return {?}\n     */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        /** @type {?} */\n        const width = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        const height = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @private\n     * @return {?}\n     */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @private\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @private\n     * @return {?}\n     */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @private\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => this._pane.classList.remove(cssClass));\n            this._appliedPanelClasses = [];\n        }\n    }\n    /**\n     * Returns the ClientRect of the current origin.\n     * @private\n     * @return {?}\n     */\n    _getOriginRect() {\n        /** @type {?} */\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        if (origin instanceof HTMLElement) {\n            return origin.getBoundingClientRect();\n        }\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y,\n            left: origin.x,\n            right: origin.x,\n            height: 0,\n            width: 0\n        };\n    }\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    /**\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?} connectedTo\n     * @param {?} viewportRuler\n     * @param {?} document\n     * @param {?=} platform\n     */\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, \n    // @breaking-change 8.0.0 `platform` parameter to be made required.\n    platform) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {THIS}\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        (/** @type {?} */ (this))._preferredPositions.push(position);\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} dir New layout direction.\n     * @return {THIS}\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.setDirection(dir);\n        }\n        else {\n            (/** @type {?} */ (this))._direction = dir;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    withOffsetX(offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetX(offset);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    withOffsetY(offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetY(offset);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    withLockedPosition(isLocked) {\n        (/** @type {?} */ (this))._positionStrategy.withLockedPosition(isLocked);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {THIS}\n     */\n    withPositions(positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions.slice();\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin element.\n     * @return {THIS}\n     */\n    setOrigin(origin) {\n        (/** @type {?} */ (this))._positionStrategy.setOrigin(origin);\n        return (/** @type {?} */ (this));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class to be added to the overlay pane wrapper.\n * @type {?}\n */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        /** @type {?} */\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New top offset.\n     * @return {THIS}\n     */\n    top(value = '') {\n        (/** @type {?} */ (this))._bottomOffset = '';\n        (/** @type {?} */ (this))._topOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-start';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New left offset.\n     * @return {THIS}\n     */\n    left(value = '') {\n        (/** @type {?} */ (this))._rightOffset = '';\n        (/** @type {?} */ (this))._leftOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-start';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New bottom offset.\n     * @return {THIS}\n     */\n    bottom(value = '') {\n        (/** @type {?} */ (this))._topOffset = '';\n        (/** @type {?} */ (this))._bottomOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-end';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New right offset.\n     * @return {THIS}\n     */\n    right(value = '') {\n        (/** @type {?} */ (this))._leftOffset = '';\n        (/** @type {?} */ (this))._rightOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-end';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New width for the overlay\n     * @return {THIS}\n     */\n    width(value = '') {\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ width: value });\n        }\n        else {\n            (/** @type {?} */ (this))._width = value;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New height for the overlay\n     * @return {THIS}\n     */\n    height(value = '') {\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ height: value });\n        }\n        else {\n            (/** @type {?} */ (this))._height = value;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {THIS}\n     */\n    centerHorizontally(offset = '') {\n        (/** @type {?} */ (this)).left(offset);\n        (/** @type {?} */ (this))._justifyContent = 'center';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {THIS}\n     */\n    centerVertically(offset = '') {\n        (/** @type {?} */ (this)).top(offset);\n        (/** @type {?} */ (this))._alignItems = 'center';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        const config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nclass OverlayPositionBuilder {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?=} _platform\n     * @param {?=} _overlayContainer\n     */\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} origin Origin relative to which to position the overlay.\n     * @return {?}\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform, 8), ɵngcc0.ɵɵinject(OverlayContainer, 8)); };\nOverlayPositionBuilder.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: OverlayPositionBuilder, factory: OverlayPositionBuilder.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform, decorators: [{ type: Optional }] },\n    { type: OverlayContainer, decorators: [{ type: Optional }] }\n];\n/** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = defineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform, decorators: [{\n                type: Optional\n            }] }, { type: OverlayContainer, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Next overlay unique ID.\n * @type {?}\n */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    /**\n     * @param {?} scrollStrategies\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _keyboardDispatcher\n     * @param {?} _injector\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?} _directionality\n     * @param {?=} _location\n     */\n    constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    create(config) {\n        /** @type {?} */\n        const host = this._createHostElement();\n        /** @type {?} */\n        const pane = this._createPaneElement(host);\n        /** @type {?} */\n        const portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @private\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    _createPaneElement(host) {\n        /** @type {?} */\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @private\n     * @return {?} Newly-create host element.\n     */\n    _createHostElement() {\n        /** @type {?} */\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @private\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8)); };\nOverlay.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\n/** @nocollapse */\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n * @type {?}\n */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n * @type {?}\n */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\n/** @nocollapse */\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} scrollStrategyFactory\n     * @param {?} _dir\n     */\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the x-axis\n     * @return {?}\n     */\n    get offsetX() { return this._offsetX; }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n    get offsetY() { return this._offsetY; }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n    get lockPosition() { return this._lockPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n    get growAfterOpen() { return this._growAfterOpen; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n    get push() { return this._push; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /**\n     * Creates an overlay\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE) {\n                this._detachOverlay();\n            }\n        });\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @private\n     * @return {?}\n     */\n    _buildConfig() {\n        /** @type {?} */\n        const positionStrategy = this._position = this._createPositionStrategy();\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _updatePositionStrategy(positionStrategy) {\n        /** @type {?} */\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @private\n     * @return {?}\n     */\n    _createPositionStrategy() {\n        /** @type {?} */\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n        return strategy;\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }] }); })();\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) { return new (t || OverlayModule)(); };\nOverlayModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        super(_document);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        const fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _addFullscreenChangeListener(fn) {\n        /** @type {?} */\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (((/** @type {?} */ (this._document))).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (((/** @type {?} */ (this._document))).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    getFullscreenElement() {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            ((/** @type {?} */ (this._document))).mozFullScreenElement ||\n            ((/** @type {?} */ (this._document))).msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nFullscreenOverlayContainer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FullscreenOverlayContainer, factory: FullscreenOverlayContainer.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ FullscreenOverlayContainer.ngInjectableDef = defineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(inject(DOCUMENT)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}