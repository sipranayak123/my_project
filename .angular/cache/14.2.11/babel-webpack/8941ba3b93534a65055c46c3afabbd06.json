{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, END, HOME, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, InjectionToken, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { take, startWith, takeUntil } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nconst _c0 = [\"*\"];\n\nclass MatChipSelectionChange {\n  /**\n   * @param {?} source\n   * @param {?} selected\n   * @param {?=} isUserInput\n   */\n  constructor(source, selected, isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n\n} // Boilerplate for applying mixins to MatChip.\n\n/**\n * \\@docs-private\n */\n\n\nclass MatChipBase {\n  /**\n   * @param {?} _elementRef\n   */\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n/** @type {?} */\n\n\nconst _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/** @type {?} */\n\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\n\nclass MatChipAvatar {}\n\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\n\nMatChipAvatar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\n\n\nclass MatChipTrailingIcon {}\n\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\n\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n\n\nclass MatChip extends _MatChipMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?} platform\n   * @param {?} globalRippleOptions\n   */\n  constructor(_elementRef, _ngZone, platform, globalRippleOptions) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /**\n     * Whether the chip has focus.\n     */\n\n    this._hasFocus = false;\n    /**\n     * Whether the chip list is selectable\n     */\n\n    this.chipListSelectable = true;\n    /**\n     * Whether the chip list is in multi-selection mode.\n     */\n\n    this._chipListMultiple = false;\n    this._selected = false;\n    this._selectable = true;\n    this._removable = true;\n    /**\n     * Emits when the chip is focused.\n     */\n\n    this._onFocus = new Subject();\n    /**\n     * Emits when the chip is blured.\n     */\n\n    this._onBlur = new Subject();\n    /**\n     * Emitted when the chip is selected or deselected.\n     */\n\n    this.selectionChange = new EventEmitter();\n    /**\n     * Emitted when the chip is destroyed.\n     */\n\n    this.destroyed = new EventEmitter();\n    /**\n     * Emitted when a chip is to be removed.\n     */\n\n    this.removed = new EventEmitter();\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.rippleConfig = globalRippleOptions || {};\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n  /**\n   * Whether the chip is selected.\n   * @return {?}\n   */\n\n\n  get selected() {\n    return this._selected;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set selected(value) {\n    /** @type {?} */\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n\n      this._dispatchSelectionChange();\n    }\n  }\n  /**\n   * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n   * @return {?}\n   */\n\n\n  get value() {\n    return this._value != undefined ? this._value : this._elementRef.nativeElement.textContent;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set value(value) {\n    this._value = value;\n  }\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   * @return {?}\n   */\n\n\n  get selectable() {\n    return this._selectable && this.chipListSelectable;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   * @return {?}\n   */\n\n\n  get removable() {\n    return this._removable;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set removable(value) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  /**\n   * The ARIA selected applied to the chip.\n   * @return {?}\n   */\n\n\n  get ariaSelected() {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) || this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        /** @type {?} */\n        this._elementRef.nativeElement.classList.add(attr);\n\n        return;\n      }\n    }\n\n    /** @type {?} */\n    this._elementRef.nativeElement.classList.add('mat-standard-chip');\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.destroyed.emit({\n      chip: this\n    });\n\n    this._chipRipple._removeTriggerEvents();\n  }\n  /**\n   * Selects the chip.\n   * @return {?}\n   */\n\n\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n\n      this._dispatchSelectionChange();\n    }\n  }\n  /**\n   * Deselects the chip.\n   * @return {?}\n   */\n\n\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n\n      this._dispatchSelectionChange();\n    }\n  }\n  /**\n   * Select this chip and emit selected event\n   * @return {?}\n   */\n\n\n  selectViaInteraction() {\n    if (!this._selected) {\n      this._selected = true;\n\n      this._dispatchSelectionChange(true);\n    }\n  }\n  /**\n   * Toggles the current selected state of this chip.\n   * @param {?=} isUserInput\n   * @return {?}\n   */\n\n\n  toggleSelected(isUserInput = false) {\n    this._selected = !this.selected;\n\n    this._dispatchSelectionChange(isUserInput);\n\n    return this.selected;\n  }\n  /**\n   * Allows for programmatic focusing of the chip.\n   * @return {?}\n   */\n\n\n  focus() {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n\n      this._onFocus.next({\n        chip: this\n      });\n    }\n\n    this._hasFocus = true;\n  }\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   * @return {?}\n   */\n\n\n  remove() {\n    if (this.removable) {\n      this.removed.emit({\n        chip: this\n      });\n    }\n  }\n  /**\n   * Handles click events on the chip.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n  /**\n   * Handle custom key presses.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleKeydown(event) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove(); // Always prevent so page navigation does not occur\n\n        event.preventDefault();\n        break;\n\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        } // Always prevent space from scrolling the page since the list has focus\n\n\n        event.preventDefault();\n        break;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _blur() {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._hasFocus = false;\n\n        this._onBlur.next({\n          chip: this\n        });\n      });\n    });\n  }\n  /**\n   * @private\n   * @param {?=} isUserInput\n   * @return {?}\n   */\n\n\n  _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n}\n\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8));\n};\n\nMatChip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"],\n  hostVars: 12,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatChip.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n  }]\n}];\n\nMatChip.propDecorators = {\n  avatar: [{\n    type: ContentChild,\n    args: [MatChipAvatar]\n  }],\n  trailingIcon: [{\n    type: ContentChild,\n    args: [MatChipTrailingIcon]\n  }],\n  removeIcon: [{\n    type: ContentChild,\n    args: [forwardRef(() => MatChipRemove)]\n  }],\n  selected: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  removable: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  removed: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n      inputs: ['color', 'disabled', 'disableRipple'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    avatar: [{\n      type: ContentChild,\n      args: [MatChipAvatar]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MatChipTrailingIcon]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [forwardRef(() => MatChipRemove)]\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n\n\nclass MatChipRemove {\n  /**\n   * @param {?} _parentChip\n   */\n  constructor(_parentChip) {\n    this._parentChip = _parentChip;\n  }\n  /**\n   * Calls the parent chip's public `remove()` method if applicable.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleClick(event) {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    } // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n\n\n    event.stopPropagation();\n  }\n\n}\n\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip));\n};\n\nMatChipRemove.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  }\n});\n/** @nocollapse */\n\nMatChipRemove.ctorParameters = () => [{\n  type: MatChip\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\n\n\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n\n/**\n * \\@docs-private\n */\n\nclass MatChipListBase {\n  /**\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} ngControl\n   */\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}\n/** @type {?} */\n\n\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase); // Increasing integer for generating unique ids for chip-list components.\n\n/** @type {?} */\n\n\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\n\nclass MatChipListChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n\n\nclass MatChipList extends _MatChipListMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} ngControl\n   */\n  constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this.ngControl = ngControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    this.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n\n    this._lastDestroyedChipIndex = null;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    this._destroyed = new Subject();\n    /**\n     * Uid of the chip list\n     */\n\n    this._uid = `mat-chip-list-${nextUniqueId++}`;\n    /**\n     * Tab index for the chip list.\n     */\n\n    this._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n\n    this._userTabIndex = null;\n    /**\n     * Function when touched\n     */\n\n    this._onTouched = () => {};\n    /**\n     * Function when changed\n     */\n\n\n    this._onChange = () => {};\n\n    this._multiple = false;\n\n    this._compareWith = (o1, o2) => o1 === o2;\n\n    this._required = false;\n    this._disabled = false;\n    /**\n     * Orientation of the chip list.\n     */\n\n    this.ariaOrientation = 'horizontal';\n    this._selectable = true;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     */\n\n    this.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  /**\n   * The array of selected chips inside chip list.\n   * @return {?}\n   */\n\n\n  get selected() {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n  /**\n   * The ARIA role applied to the chip list.\n   * @return {?}\n   */\n\n\n  get role() {\n    return this.empty ? null : 'listbox';\n  }\n  /**\n   * Whether the user should be allowed to select multiple chips.\n   * @return {?}\n   */\n\n\n  get multiple() {\n    return this._multiple;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n\n    this._syncChipsState();\n  }\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   * @return {?}\n   */\n\n\n  get compareWith() {\n    return this._compareWith;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  set compareWith(fn) {\n    this._compareWith = fn;\n\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set value(value) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get id() {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /**\n   * Whether any chips or the matChipInput inside of this chip-list has focus.\n   * @return {?}\n   */\n\n\n  get focused() {\n    return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get empty() {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get shouldLabelFloat() {\n    return !this.empty || this.focused;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get disabled() {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    this._syncChipsState();\n  }\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   * @return {?}\n   */\n\n\n  get selectable() {\n    return this._selectable;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set tabIndex(value) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n  /**\n   * Combined stream of all of the child chips' selection change events.\n   * @return {?}\n   */\n\n\n  get chipSelectionChanges() {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n  /**\n   * Combined stream of all of the child chips' focus change events.\n   * @return {?}\n   */\n\n\n  get chipFocusChanges() {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n  /**\n   * Combined stream of all of the child chips' blur change events.\n   * @return {?}\n   */\n\n\n  get chipBlurChanges() {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n  /**\n   * Combined stream of all of the child chips' remove change events.\n   * @return {?}\n   */\n\n\n  get chipRemoveChanges() {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    } // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n\n        this._changeDetectorRef.markForCheck();\n      });\n    }); // When the list changes, re-subscribe\n\n\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips(); // Reset chips selected/deselected status\n\n\n      this._initializeSelection(); // Check to see if we need to update our tab index\n\n\n      this._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n  /**\n   * Associates an HTML input element with this chip list.\n   * @param {?} inputElement\n   * @return {?}\n   */\n\n\n  registerInput(inputElement) {\n    this._chipInput = inputElement;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @param {?} ids\n   * @return {?}\n   */\n\n\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  } // Implemented as part of ControlValueAccessor.\n\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  writeValue(value) {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  } // Implemented as part of ControlValueAccessor.\n\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  onContainerClick(event) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   * @return {?}\n   */\n\n\n  focus() {\n    if (this.disabled) {\n      return;\n    } // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n\n\n    if (this._chipInput && this._chipInput.focused) {// do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Attempt to focus an input if we have one.\n   * @return {?}\n   */\n\n\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _keydown(event) {\n    /** @type {?} */\n    const target =\n    /** @type {?} */\n    event.target; // If they are on an empty input and hit backspace, focus the last chip\n\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   * @protected\n   * @return {?}\n   */\n\n\n  _updateTabIndex() {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   * @protected\n   * @return {?}\n   */\n\n\n  _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      /** @type {?} */\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @private\n   * @param {?} index The index to be checked.\n   * @return {?} True if the index is valid for our list of chips.\n   */\n\n\n  _isValidIndex(index) {\n    return index >= 0 && index < this.chips.length;\n  }\n  /**\n   * @private\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _isInputEmpty(element) {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      /** @type {?} */\n      let input =\n      /** @type {?} */\n      element;\n      return !input.value;\n    }\n\n    return false;\n  }\n  /**\n   * @param {?} value\n   * @param {?=} isUserInput\n   * @return {?}\n   */\n\n\n  _setSelectionByValue(value, isUserInput = true) {\n    this._clearSelection();\n\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n\n      this._sortValues();\n    } else {\n      /** @type {?} */\n      const correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n\n\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n  /**\n   * Finds and selects the chip based on its value.\n   * @private\n   * @param {?} value\n   * @param {?=} isUserInput\n   * @return {?} Chip that has the corresponding value.\n   */\n\n\n  _selectValue(value, isUserInput = true) {\n    /** @type {?} */\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value, value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n\n        this.stateChanges.next();\n      }\n    });\n  }\n  /**\n   * Deselects every chip in the list.\n   * @private\n   * @param {?=} skip Chip that should not be deselected.\n   * @return {?}\n   */\n\n\n  _clearSelection(skip) {\n    this._selectionModel.clear();\n\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   * @private\n   * @return {?}\n   */\n\n\n  _sortValues() {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Emits change event to set the model value.\n   * @private\n   * @param {?=} fallbackValue\n   * @return {?}\n   */\n\n\n  _propagateChanges(fallbackValue) {\n    /** @type {?} */\n    let valueToEmit = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n\n    this._onChange(valueToEmit);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * When blurred, mark the field as touched when focus moved outside the chip list.\n   * @return {?}\n   */\n\n\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n  /**\n   * Mark the field as touched\n   * @return {?}\n   */\n\n\n  _markAsTouched() {\n    this._onTouched();\n\n    this._changeDetectorRef.markForCheck();\n\n    this.stateChanges.next();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _resetChips() {\n    this._dropSubscriptions();\n\n    this._listenToChipsFocus();\n\n    this._listenToChipsSelection();\n\n    this._listenToChipsRemoved();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n\n      this._chipRemoveSubscription = null;\n    }\n  }\n  /**\n   * Listens to user-generated selection events on each chip.\n   * @private\n   * @return {?}\n   */\n\n\n  _listenToChipsSelection() {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n  /**\n   * Listens to user-generated selection events on each chip.\n   * @private\n   * @return {?}\n   */\n\n\n  _listenToChipsFocus() {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      /** @type {?} */\n      let chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n\n      this.stateChanges.next();\n    });\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _listenToChipsRemoved() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      /** @type {?} */\n      const chip = event.chip;\n      /** @type {?} */\n\n      const chipIndex = this.chips.toArray().indexOf(event.chip); // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n  /**\n   * Checks whether an event comes from inside a chip element.\n   * @private\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _originatesFromChip(event) {\n    /** @type {?} */\n    let currentElement =\n    /** @type {?} */\n    event.target;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n  /**\n   * Checks whether any of the chips is focused.\n   * @private\n   * @return {?}\n   */\n\n\n  _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n  /**\n   * Syncs the list's state with the individual chips.\n   * @private\n   * @return {?}\n   */\n\n\n  _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n\n}\n\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n};\n\nMatChipList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatChipList.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}];\n\nMatChipList.propDecorators = {\n  errorStateMatcher: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ariaOrientation: [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  selectable: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  chips: [{\n    type: ContentChildren,\n    args: [MatChip]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.ErrorStateMatcher\n    }, {\n      type: ɵngcc3.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids.\n\n/** @type {?} */\n\n\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n\nclass MatChipInput {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _defaultOptions\n   */\n  constructor(_elementRef, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /**\n     * Whether the control is focused.\n     */\n\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     */\n\n    this.chipEnd = new EventEmitter();\n    /**\n     * The input's placeholder text.\n     */\n\n    this.placeholder = '';\n    /**\n     * Unique id for the input.\n     */\n\n    this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n    this._disabled = false;\n    this._inputElement =\n    /** @type {?} */\n    this._elementRef.nativeElement;\n  }\n  /**\n   * Register input for chip list\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set chipList(value) {\n    if (value) {\n      this._chipList = value;\n\n      this._chipList.registerInput(this);\n    }\n  }\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   * @return {?}\n   */\n\n\n  get addOnBlur() {\n    return this._addOnBlur;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set addOnBlur(value) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the input is disabled.\n   * @return {?}\n   */\n\n\n  get disabled() {\n    return this._disabled || this._chipList && this._chipList.disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the input is empty.\n   * @return {?}\n   */\n\n\n  get empty() {\n    return !this._inputElement.value;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * Utility method to make host definition/tests more clear.\n   * @param {?=} event\n   * @return {?}\n   */\n\n\n  _keydown(event) {\n    this._emitChipEnd(event);\n  }\n  /**\n   * Checks to see if the blur should emit the (chipEnd) event.\n   * @return {?}\n   */\n\n\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n\n    this.focused = false; // Blur the chip list if it is not focused\n\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _focus() {\n    this.focused = true;\n\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * Checks to see if the (chipEnd) event needs to be emitted.\n   * @param {?=} event\n   * @return {?}\n   */\n\n\n  _emitChipEnd(event) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({\n        input: this._inputElement,\n        value: this._inputElement.value\n      });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n  /**\n   * Focuses the input.\n   * @return {?}\n   */\n\n\n  focus() {\n    this._inputElement.focus();\n  }\n  /**\n   * Checks whether a keycode is one of the configured separators.\n   * @private\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _isSeparatorKey(event) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n    /** @type {?} */\n\n\n    const separators = this.separatorKeyCodes;\n    /** @type {?} */\n\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n\n}\n\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\n\nMatChipInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 4,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null);\n    }\n  },\n  inputs: {\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nMatChipInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_CHIPS_DEFAULT_OPTIONS]\n  }]\n}];\n\nMatChipInput.propDecorators = {\n  chipList: [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  addOnBlur: [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  separatorKeyCodes: [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  chipEnd: [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nconst ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\n\nclass MatChipsModule {}\n\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n  return new (t || MatChipsModule)();\n};\n\nMatChipsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue:\n    /** @type {?} */\n    ɵ0\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue:\n        /** @type {?} */\n        ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon],\n    exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatChipsModule, MatChipListBase, _MatChipListMixinBase, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipBase, _MatChipMixinBase, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS };","map":{"version":3,"names":["coerceBooleanProperty","BACKSPACE","DELETE","SPACE","END","HOME","hasModifierKey","ENTER","Platform","ContentChild","Directive","ElementRef","EventEmitter","forwardRef","Inject","Input","NgZone","Optional","Output","InjectionToken","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChildren","Self","ViewEncapsulation","NgModule","MAT_RIPPLE_GLOBAL_OPTIONS","mixinColor","mixinDisabled","mixinDisableRipple","RippleRenderer","ErrorStateMatcher","mixinErrorState","Subject","merge","take","startWith","takeUntil","FocusKeyManager","Directionality","SelectionModel","FormGroupDirective","NgControl","NgForm","MatFormFieldControl","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","MatChipSelectionChange","constructor","source","selected","isUserInput","MatChipBase","_elementRef","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","ngDevMode","ɵsetClassMetadata","args","selector","host","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","_ngZone","platform","globalRippleOptions","_hasFocus","chipListSelectable","_chipListMultiple","_selected","_selectable","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRipple","setupTriggerEvents","nativeElement","rippleConfig","rippleDisabled","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","removable","ariaSelected","toString","attr","hasAttribute","tagName","toLowerCase","classList","add","ngOnDestroy","emit","chip","_removeTriggerEvents","select","deselect","selectViaInteraction","toggleSelected","focus","next","remove","_handleClick","event","preventDefault","stopPropagation","_handleKeydown","keyCode","_blur","onStable","asObservable","pipe","subscribe","run","MatChip_Factory","ɵɵdirectiveInject","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatChipRemove","_t","ɵɵqueryRefresh","ɵɵloadQuery","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","ɵɵlistener","MatChip_click_HostBindingHandler","$event","MatChip_keydown_HostBindingHandler","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","ɵɵattribute","ɵɵclassProp","inputs","color","outputs","exportAs","features","ɵɵInheritDefinitionFeature","ctorParameters","decorators","propDecorators","_parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","nextUniqueId","MatChipListChange","MatChipList","_changeDetectorRef","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","_disabled","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","role","empty","_syncChipsState","compareWith","fn","_initializeSelection","writeValue","id","_chipInput","required","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","shouldLabelFloat","forEach","tabIndex","chipSelectionChanges","map","chipFocusChanges","chipBlurChanges","chipRemoveChanges","ngAfterContentInit","_keyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","dir","tabOut","setTimeout","markForCheck","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","ngDoCheck","updateErrorState","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","setFirstItemActive","_focusInput","_keydown","target","_isInputEmpty","setLastItemActive","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","element","nodeName","input","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","clear","_propagateChanges","fallbackValue","valueToEmit","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","isSelected","chipIndex","toArray","indexOf","updateActiveItemIndex","currentElement","parentElement","some","MatChipList_Factory","ɵcmp","ɵɵdefineComponent","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","ɵɵhostProperty","errorState","errorStateMatcher","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","providers","None","OnPush","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","chipList","_chipList","addOnBlur","ngOnChanges","_emitChipEnd","_focus","_isSeparatorKey","_onInput","separators","has","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","MatChipInput_input_HostBindingHandler","invalid","ɵɵNgOnChangesFeature","CHIP_DECLARATIONS","ɵ0","MatChipsModule","MatChipsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useValue","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/apple/Desktop/zepto/my_project/node_modules/@angular/material/__ivy_ngcc__/esm2015/chips.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, END, HOME, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, InjectionToken, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { take, startWith, takeUntil } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n// Boilerplate for applying mixins to MatChip.\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/** @type {?} */\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     */\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        /**\n         * Whether the chip list is in multi-selection mode.\n         */\n        this._chipListMultiple = false;\n        this._selected = false;\n        this._selectable = true;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n        this.rippleConfig = globalRippleOptions || {};\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value != undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        // Add class for the different chips\n        for (const attr of CHIP_ATTRIBUTE_NAMES) {\n            if (this._elementRef.nativeElement.hasAttribute(attr) ||\n                this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n                ((/** @type {?} */ (this._elementRef.nativeElement))).classList.add(attr);\n                return;\n            }\n        }\n        ((/** @type {?} */ (this._elementRef.nativeElement))).classList.add('mat-standard-chip');\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8)); };\nMatChip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"], hostVars: 12, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled);\n    } }, inputs: { color: \"color\", disabled: \"disabled\", disableRipple: \"disableRipple\", selected: \"selected\", value: \"value\", selectable: \"selectable\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MatChipAvatar,] }],\n    trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon,] }],\n    removeIcon: [{ type: ContentChild, args: [forwardRef(() => MatChipRemove),] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disabled', 'disableRipple'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip',\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MatChipAvatar]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MatChipTrailingIcon]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [forwardRef(() => MatChipRemove)]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     */\n    constructor(_parentChip) {\n        this._parentChip = _parentChip;\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this._parentChip.removable) {\n            this._parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip)); };\nMatChipRemove.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } } });\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                }\n            }]\n    }], function () { return [{ type: MatChip }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = () => { };\n        /**\n         * Function when changed\n         */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        // Prevents the chip list from capturing focus and redirecting\n        // it back to the first chip when the user tabs out.\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @return {?}\n     */\n    focus() {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @return {?}\n     */\n    _focusInput() {\n        if (this._chipInput) {\n            this._chipInput.focus();\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        if (this._lastDestroyedChipIndex != null && this.chips.length) {\n            /** @type {?} */\n            const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n            this._keyManager.setActiveItem(newChipIndex);\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            /** @type {?} */\n            let input = (/** @type {?} */ (element));\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            /** @type {?} */\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        /** @type {?} */\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            /** @type {?} */\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItemIndex(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            /** @type {?} */\n            const chip = event.chip;\n            /** @type {?} */\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _originatesFromChip(event) {\n        /** @type {?} */\n        let currentElement = (/** @type {?} */ (event.target));\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n    _hasFocusedChip() {\n        return this.chips.some(chip => chip._hasFocus);\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip.disabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{ selector: 'mat-chip-list', template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, exportAs: 'matChipList', host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                }, providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids.\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n    focus() {\n        this._inputElement.focus();\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _isSeparatorKey(event) {\n        if (hasModifierKey(event)) {\n            return false;\n        }\n        /** @type {?} */\n        const separators = this.separatorKeyCodes;\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 4, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = ({\n    separatorKeyCodes: [ENTER]\n});\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ( /** @type {?} */(ɵ0))\n        }\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ( /** @type {?} */(ɵ0))\n                    }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon], exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatChipsModule, MatChipListBase, _MatChipListMixinBase, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipBase, _MatChipMixinBase, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}