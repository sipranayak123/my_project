{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, InjectionToken, ChangeDetectionStrategy, Component, ElementRef, ViewEncapsulation, Optional, Input, ContentChild, ContentChildren, EventEmitter, NgZone, Output, ViewChild, Self, NgModule } from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject, merge, Subscription, asapScheduler, of } from 'rxjs';\nimport { trigger, state, style, animate, transition, query, group } from '@angular/animations';\nimport { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { mixinDisabled, mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { startWith, switchMap, take, delay, filter, takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nconst _c0 = [\"mat-menu-item\", \"\"];\nconst _c1 = [\"*\"];\n\nfunction MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r1._handleKeydown($event));\n    })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r3.closed.emit(\"click\"));\n    })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r4._onAnimationStart($event));\n    })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r5._onAnimationDone($event));\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n  }\n}\n\nclass MatMenuContent {\n  /**\n   * @param {?} _template\n   * @param {?} _componentFactoryResolver\n   * @param {?} _appRef\n   * @param {?} _injector\n   * @param {?} _viewContainerRef\n   * @param {?} _document\n   */\n  constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document) {\n    this._template = _template;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._injector = _injector;\n    this._viewContainerRef = _viewContainerRef;\n    this._document = _document;\n    /**\n     * Emits when the menu content has been attached.\n     */\n\n    this._attached = new Subject();\n  }\n  /**\n   * Attaches the content with a particular context.\n   * \\@docs-private\n   * @param {?=} context\n   * @return {?}\n   */\n\n\n  attach(context = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n    }\n    /** @type {?} */\n\n\n    const element = this._template.elementRef.nativeElement; // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n\n    /** @type {?} */\n    element.parentNode.insertBefore(this._outlet.outletElement, element);\n\n    this._portal.attach(this._outlet, context);\n\n    this._attached.next();\n  }\n  /**\n   * Detaches the content.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n\n}\n\nMatMenuContent.ɵfac = function MatMenuContent_Factory(t) {\n  return new (t || MatMenuContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nMatMenuContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatMenuContent,\n  selectors: [[\"ng-template\", \"matMenuContent\", \"\"]]\n});\n/** @nocollapse */\n\nMatMenuContent.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: ApplicationRef\n}, {\n  type: Injector\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matMenuContent]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.ApplicationRef\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * \\@docs-private\n * @type {?}\n */\n\n\nconst matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [state('void', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), transition('void => enter', group([query('.mat-menu-content', animate('100ms linear', style({\n    opacity: 1\n  }))), animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'scale(1)'\n  }))])), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [// TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', style({\n    opacity: 1\n  })), transition('void => *', [style({\n    opacity: 0\n  }), animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\nconst transformMenu = matMenuAnimations.transformMenu;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * \\@docs-private\n * @return {?}\n */\n\nfunction throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatMenuItem.\n\n/**\n * \\@docs-private\n */\n\nclass MatMenuItemBase {}\n/** @type {?} */\n\n\nconst _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n\n\nclass MatMenuItem extends _MatMenuItemMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?=} document\n   * @param {?=} _focusMonitor\n   * @param {?=} _parentMenu\n   */\n  constructor(_elementRef, document, _focusMonitor, _parentMenu) {\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._parentMenu = _parentMenu;\n    /**\n     * ARIA role for the menu item.\n     */\n\n    this.role = 'menuitem';\n    /**\n     * Stream that emits when the menu item is hovered.\n     */\n\n    this._hovered = new Subject();\n    /**\n     * Whether the menu item is highlighted.\n     */\n\n    this._highlighted = false;\n    /**\n     * Whether the menu item acts as a trigger for a sub-menu.\n     */\n\n    this._triggersSubmenu = false;\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n  /**\n   * Focuses the menu item.\n   * @param {?=} origin\n   * @return {?}\n   */\n\n\n  focus(origin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n  /**\n   * Used to set the `tabindex`.\n   * @return {?}\n   */\n\n\n  _getTabIndex() {\n    return this.disabled ? '-1' : '0';\n  }\n  /**\n   * Returns the host DOM element.\n   * @return {?}\n   */\n\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n  /**\n   * Prevents the default element actions if it is disabled.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _checkDisabled(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  /**\n   * Emits to the hover stream.\n   * @return {?}\n   */\n\n\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n  /**\n   * Gets the label to be used when determining whether the option should be focused.\n   * @return {?}\n   */\n\n\n  getLabel() {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    /** @type {?} */\n\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    /** @type {?} */\n\n    let output = '';\n\n    if (element.childNodes) {\n      /** @type {?} */\n      const length = element.childNodes.length; // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) {\n  return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8));\n};\n\nMatMenuItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatMenuItem,\n  selectors: [[\"\", \"mat-menu-item\", \"\"]],\n  hostAttrs: [1, \"mat-menu-item\"],\n  hostVars: 8,\n  hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n        return ctx._checkDisabled($event);\n      })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n        return ctx._handleMouseEnter();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n      ɵngcc0.ɵɵclassProp(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    role: \"role\"\n  },\n  exportAs: [\"matMenuItem\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 2,\n  vars: 2,\n  consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"]],\n  template: function MatMenuItem_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelement(1, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n    }\n  },\n  dependencies: [ɵngcc2.MatRipple],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatMenuItem.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_PANEL]\n  }, {\n    type: Optional\n  }]\n}];\n\nMatMenuItem.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuItem, [{\n    type: Component,\n    args: [{\n      selector: '[mat-menu-item]',\n      exportAs: 'matMenuItem',\n      inputs: ['disabled', 'disableRipple'],\n      host: {\n        '[attr.role]': 'role',\n        'class': 'mat-menu-item',\n        '[class.mat-menu-item-highlighted]': '_highlighted',\n        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content></ng-content><div class=\\\"mat-menu-ripple\\\" matRipple [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_PANEL]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token to be used to override the default options for `mat-menu`.\n * @type {?}\n */\n\n\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_MENU_BASE_ELEVATION = 4;\n\nclass MatMenu {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?} _defaultOptions\n   */\n  constructor(_elementRef, _ngZone, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions;\n    this._xPosition = this._defaultOptions.xPosition;\n    this._yPosition = this._defaultOptions.yPosition;\n    /**\n     * Menu items inside the current menu.\n     */\n\n    this._items = [];\n    /**\n     * Emits whenever the amount of menu items changes.\n     */\n\n    this._itemChanges = new Subject();\n    /**\n     * Subscription to tab events on the menu panel\n     */\n\n    this._tabSubscription = Subscription.EMPTY;\n    /**\n     * Config object to be passed into the menu's ngClass\n     */\n\n    this._classList = {};\n    /**\n     * Current state of the panel animation.\n     */\n\n    this._panelAnimationState = 'void';\n    /**\n     * Emits whenever an animation on the menu completes.\n     */\n\n    this._animationDone = new Subject();\n    /**\n     * Class to be added to the backdrop element.\n     */\n\n    this.backdropClass = this._defaultOptions.backdropClass;\n    this._overlapTrigger = this._defaultOptions.overlapTrigger;\n    this._hasBackdrop = this._defaultOptions.hasBackdrop;\n    /**\n     * Event emitted when the menu is closed.\n     */\n\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * \\@breaking-change 8.0.0\n     */\n\n    this.close = this.closed;\n  }\n  /**\n   * Position of the menu in the X axis.\n   * @return {?}\n   */\n\n\n  get xPosition() {\n    return this._xPosition;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set xPosition(value) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n  /**\n   * Position of the menu in the Y axis.\n   * @return {?}\n   */\n\n\n  get yPosition() {\n    return this._yPosition;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set yPosition(value) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n  /**\n   * Whether the menu should overlap its trigger.\n   * @return {?}\n   */\n\n\n  get overlapTrigger() {\n    return this._overlapTrigger;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set overlapTrigger(value) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the menu has a backdrop.\n   * @return {?}\n   */\n\n\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param {?} classes list of class names\n   * @return {?}\n   */\n\n\n  set panelClass(classes) {\n    /** @type {?} */\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach(className => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach(className => {\n        this._classList[className] = true;\n      });\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n\n\n  get classList() {\n    return this.panelClass;\n  }\n  /**\n   * @param {?} classes\n   * @return {?}\n   */\n\n\n  set classList(classes) {\n    this.panelClass = classes;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n\n    this.closed.complete();\n  }\n  /**\n   * Stream that emits whenever the hovered menu item changes.\n   * @return {?}\n   */\n\n\n  _hovered() {\n    return this._itemChanges.pipe(startWith(this._items), switchMap(items => merge(...items.map(item => item._hovered))));\n  }\n  /**\n   * Handle a keyboard event from the menu, delegating to the appropriate action.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        break;\n\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n\n        break;\n\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n\n        break;\n\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n\n    }\n  }\n  /**\n   * Focus the first item in the menu.\n   * @param {?=} origin Action from which the focus originated. Used to set the correct styling.\n   * @return {?}\n   */\n\n\n  focusFirstItem(origin = 'program') {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   * @return {?}\n   */\n\n\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n  /**\n   * Sets the menu panel elevation.\n   * @param {?} depth Number of parent menus that come before the menu.\n   * @return {?}\n   */\n\n\n  setElevation(depth) {\n    // The elevation starts at the base and increases by one for each level.\n\n    /** @type {?} */\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    /** @type {?} */\n\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n  /**\n   * Registers a menu item with the menu.\n   * \\@docs-private\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  addItem(item) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n\n      this._itemChanges.next(this._items);\n    }\n  }\n  /**\n   * Removes an item from the menu.\n   * \\@docs-private\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  removeItem(item) {\n    /** @type {?} */\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n\n      this._itemChanges.next(this._items);\n    }\n  }\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * \\@docs-private\n   * @param {?=} posX Position of the menu along the x axis.\n   * @param {?=} posY Position of the menu along the y axis.\n   * @return {?}\n   */\n\n\n  setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n    /** @type {?} */\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n  /**\n   * Starts the enter animation.\n   * @return {?}\n   */\n\n\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n  /**\n   * Resets the panel animation to its initial state.\n   * @return {?}\n   */\n\n\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n  /**\n   * Callback that is invoked when the panel animation completes.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _onAnimationDone(event) {\n    this._animationDone.next(event);\n\n    this._isAnimating = false;\n  }\n  /**\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _onAnimationStart(event) {\n    this._isAnimating = true; // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n}\n\nMatMenu.ɵfac = function MatMenu_Factory(t) {\n  return new (t || MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n};\n\nMatMenu.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatMenu,\n  selectors: [[\"mat-menu\"]],\n  contentQueries: function MatMenu_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuContent, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n    }\n  },\n  viewQuery: function MatMenu_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    }\n  },\n  inputs: {\n    backdropClass: \"backdropClass\",\n    xPosition: \"xPosition\",\n    yPosition: \"yPosition\",\n    overlapTrigger: \"overlapTrigger\",\n    hasBackdrop: \"hasBackdrop\",\n    panelClass: [\"class\", \"panelClass\"],\n    classList: \"classList\"\n  },\n  outputs: {\n    closed: \"closed\",\n    close: \"close\"\n  },\n  exportAs: [\"matMenu\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_MENU_PANEL,\n    useExisting: MatMenu\n  }])],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]],\n  template: function MatMenu_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 2, \"ng-template\");\n    }\n  },\n  dependencies: [ɵngcc3.NgClass],\n  styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0}.mat-menu-panel.ng-animating{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}@media (-ms-high-contrast:active){.mat-menu-item-highlighted,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item.cdk-program-focused{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatMenu.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_DEFAULT_OPTIONS]\n  }]\n}];\n\nMatMenu.propDecorators = {\n  backdropClass: [{\n    type: Input\n  }],\n  xPosition: [{\n    type: Input\n  }],\n  yPosition: [{\n    type: Input\n  }],\n  templateRef: [{\n    type: ViewChild,\n    args: [TemplateRef]\n  }],\n  items: [{\n    type: ContentChildren,\n    args: [MatMenuItem]\n  }],\n  lazyContent: [{\n    type: ContentChild,\n    args: [MatMenuContent]\n  }],\n  overlapTrigger: [{\n    type: Input\n  }],\n  hasBackdrop: [{\n    type: Input\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['class']\n  }],\n  classList: [{\n    type: Input\n  }],\n  closed: [{\n    type: Output\n  }],\n  close: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenu, [{\n    type: Component,\n    args: [{\n      selector: 'mat-menu',\n      template: \"<ng-template><div class=\\\"mat-menu-panel\\\" [ngClass]=\\\"_classList\\\" (keydown)=\\\"_handleKeydown($event)\\\" (click)=\\\"closed.emit('click')\\\" [@transformMenu]=\\\"_panelAnimationState\\\" (@transformMenu.start)=\\\"_onAnimationStart($event)\\\" (@transformMenu.done)=\\\"_onAnimationDone($event)\\\" tabindex=\\\"-1\\\" role=\\\"menu\\\"><div class=\\\"mat-menu-content\\\"><ng-content></ng-content></div></div></ng-template>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matMenu',\n      animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],\n      providers: [{\n        provide: MAT_MENU_PANEL,\n        useExisting: MatMenu\n      }],\n      styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0}.mat-menu-panel.ng-animating{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}@media (-ms-high-contrast:active){.mat-menu-item-highlighted,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item.cdk-program-focused{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    backdropClass: [{\n      type: Input\n    }],\n    closed: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }],\n    xPosition: [{\n      type: Input\n    }],\n    yPosition: [{\n      type: Input\n    }],\n    overlapTrigger: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['class']\n    }],\n    classList: [{\n      type: Input\n    }],\n    templateRef: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    items: [{\n      type: ContentChildren,\n      args: [MatMenuItem]\n    }],\n    lazyContent: [{\n      type: ContentChild,\n      args: [MatMenuContent]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that determines the scroll handling while the menu is open.\n * @type {?}\n */\n\n\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Default top padding of the menu panel.\n * @type {?}\n */\n\nconst MENU_PANEL_TOP_PADDING = 8;\n/**\n * Options for binding a passive event listener.\n * @type {?}\n */\n\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n}); // TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n\nclass MatMenuTrigger {\n  /**\n   * @param {?} _overlay\n   * @param {?} _element\n   * @param {?} _viewContainerRef\n   * @param {?} scrollStrategy\n   * @param {?} _parentMenu\n   * @param {?} _menuItemInstance\n   * @param {?} _dir\n   * @param {?=} _focusMonitor\n   */\n  constructor(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {\n    this._overlay = _overlay;\n    this._element = _element;\n    this._viewContainerRef = _viewContainerRef;\n    this._parentMenu = _parentMenu;\n    this._menuItemInstance = _menuItemInstance;\n    this._dir = _dir;\n    this._focusMonitor = _focusMonitor;\n    this._overlayRef = null;\n    this._menuOpen = false;\n    this._closingActionsSubscription = Subscription.EMPTY;\n    this._hoverSubscription = Subscription.EMPTY;\n    this._menuCloseSubscription = Subscription.EMPTY;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n\n    this._handleTouchStart = () => this._openedBy = 'touch'; // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n\n\n    this._openedBy = null;\n    /**\n     * Event emitted when the associated menu is opened.\n     */\n\n    this.menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * \\@breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onMenuOpen = this.menuOpened;\n    /**\n     * Event emitted when the associated menu is closed.\n     */\n\n    this.menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * \\@breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onMenuClose = this.menuClosed;\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * @deprecated\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n\n\n  get _deprecatedMatMenuTriggerFor() {\n    return this.menu;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n\n\n  set _deprecatedMatMenuTriggerFor(v) {\n    this.menu = v;\n  }\n  /**\n   * References the menu instance that the trigger is associated with.\n   * @return {?}\n   */\n\n\n  get menu() {\n    return this._menu;\n  }\n  /**\n   * @param {?} menu\n   * @return {?}\n   */\n\n\n  set menu(menu) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu(); // If a click closed the menu, we should close the entire chain of nested menus.\n\n\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this._handleHover();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n\n    this._closingActionsSubscription.unsubscribe();\n  }\n  /**\n   * Whether the menu is open.\n   * @return {?}\n   */\n\n\n  get menuOpen() {\n    return this._menuOpen;\n  }\n  /**\n   * The text direction of the containing app.\n   * @return {?}\n   */\n\n\n  get dir() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /**\n   * Whether the menu triggers a sub-menu or a top-level one.\n   * @return {?}\n   */\n\n\n  triggersSubmenu() {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n  /**\n   * Toggles the menu between the open and closed states.\n   * @return {?}\n   */\n\n\n  toggleMenu() {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n  /**\n   * Opens the menu.\n   * @return {?}\n   */\n\n\n  openMenu() {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n    /** @type {?} */\n\n\n    const overlayRef = this._createOverlay();\n    /** @type {?} */\n\n\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(\n    /** @type {?} */\n    overlayConfig.positionStrategy);\n\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n  /**\n   * Closes the menu.\n   * @return {?}\n   */\n\n\n  closeMenu() {\n    this.menu.close.emit();\n  }\n  /**\n   * Focuses the menu trigger.\n   * @param {?=} origin Source of the menu trigger's focus.\n   * @return {?}\n   */\n\n\n  focus(origin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n  /**\n   * Closes the menu and does the necessary cleanup.\n   * @private\n   * @return {?}\n   */\n\n\n  _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone.pipe(filter(event => event.toState === 'void'), take(1), // Interrupt if the content got re-attached.\n        takeUntil(menu.lazyContent._attached)).subscribe(() =>\n        /** @type {?} */\n        menu.lazyContent.detach(), undefined, () => {\n          // No matter whether the content got re-attached, reset the menu.\n          this._resetMenu();\n        });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   * @private\n   * @return {?}\n   */\n\n\n  _initMenu() {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n\n    this._setMenuElevation();\n\n    this._setIsMenuOpen(true);\n\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n  /**\n   * Updates the menu elevation based on the amount of parent menus that it has.\n   * @private\n   * @return {?}\n   */\n\n\n  _setMenuElevation() {\n    if (this.menu.setElevation) {\n      /** @type {?} */\n      let depth = 0;\n      /** @type {?} */\n\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   * @private\n   * @return {?}\n   */\n\n\n  _resetMenu() {\n    this._setIsMenuOpen(false); // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n\n\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  } // set state rather than toggle to support triggers sharing a menu\n\n  /**\n   * @private\n   * @param {?} isOpen\n   * @return {?}\n   */\n\n\n  _setIsMenuOpen(isOpen) {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   * @private\n   * @return {?}\n   */\n\n\n  _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   * @private\n   * @return {?}\n   */\n\n\n  _createOverlay() {\n    if (!this._overlayRef) {\n      /** @type {?} */\n      const config = this._getOverlayConfig();\n\n      this._subscribeToPositions(\n      /** @type {?} */\n      config.positionStrategy);\n\n      this._overlayRef = this._overlay.create(config); // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @private\n   * @return {?} OverlayConfig\n   */\n\n\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withTransformOriginOn('.mat-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   * @private\n   * @param {?} position\n   * @return {?}\n   */\n\n\n  _subscribeToPositions(position) {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        /** @type {?} */\n        const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        /** @type {?} */\n\n        const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        /** @type {?} */\n        this.menu.setPositionClasses(posX, posY);\n      });\n    }\n  }\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @private\n   * @param {?} positionStrategy Strategy whose position to update.\n   * @return {?}\n   */\n\n\n  _setPosition(positionStrategy) {\n    let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n    let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    /** @type {?} */\n\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([{\n      originX,\n      originY,\n      overlayX,\n      overlayY,\n      offsetY\n    }, {\n      originX: originFallbackX,\n      originY,\n      overlayX: overlayFallbackX,\n      overlayY,\n      offsetY\n    }, {\n      originX,\n      originY: originFallbackY,\n      overlayX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }, {\n      originX: originFallbackX,\n      originY: originFallbackY,\n      overlayX: overlayFallbackX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }]);\n  }\n  /**\n   * Cleans up the active subscriptions.\n   * @private\n   * @return {?}\n   */\n\n\n  _cleanUpSubscriptions() {\n    this._closingActionsSubscription.unsubscribe();\n\n    this._hoverSubscription.unsubscribe();\n  }\n  /**\n   * Returns a stream that emits whenever an action that should close the menu occurs.\n   * @private\n   * @return {?}\n   */\n\n\n  _menuClosingActions() {\n    /** @type {?} */\n    const backdrop =\n    /** @type {?} */\n    this._overlayRef.backdropClick();\n    /** @type {?} */\n\n\n    const detachments =\n    /** @type {?} */\n    this._overlayRef.detachments();\n    /** @type {?} */\n\n\n    const parentClose = this._parentMenu ? this._parentMenu.closed : of();\n    /** @type {?} */\n\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n  /**\n   * Handles mouse presses on the trigger.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleMousedown(event) {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null; // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n  /**\n   * Handles key presses on the trigger.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n      this.openMenu();\n    }\n  }\n  /**\n   * Handles click events on the trigger.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleClick(event) {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n  /**\n   * Handles the cases where the user hovers over the trigger.\n   * @private\n   * @return {?}\n   */\n\n\n  _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered() // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n    // with different data and triggers), we have to delay it by a tick to ensure that\n    // it won't be closed immediately after it is opened.\n    .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(() => {\n      this._openedBy = 'mouse'; // If the same menu is used between multiple triggers, it might still be animating\n      // while the new trigger tries to re-open it. Wait for the animation to finish\n      // before doing so. Also interrupt if the user moves to another item.\n\n      if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n        // We need the `delay(0)` here in order to avoid\n        // 'changed after checked' errors in some cases. See #12194.\n        this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered())).subscribe(() => this.openMenu());\n      } else {\n        this.openMenu();\n      }\n    });\n  }\n  /**\n   * Gets the portal that should be attached to the overlay.\n   * @private\n   * @return {?}\n   */\n\n\n  _getPortal() {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n\nMatMenuTrigger.ɵfac = function MatMenuTrigger_Factory(t) {\n  return new (t || MatMenuTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MatMenu, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n};\n\nMatMenuTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatMenuTrigger,\n  selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n  hostAttrs: [\"aria-haspopup\", \"true\"],\n  hostVars: 1,\n  hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mousedown\", function MatMenuTrigger_mousedown_HostBindingHandler($event) {\n        return ctx._handleMousedown($event);\n      })(\"keydown\", function MatMenuTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"click\", function MatMenuTrigger_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.menuOpen || null);\n    }\n  },\n  inputs: {\n    _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n    menu: [\"matMenuTriggerFor\", \"menu\"],\n    menuData: [\"matMenuTriggerData\", \"menuData\"]\n  },\n  outputs: {\n    menuOpened: \"menuOpened\",\n    onMenuOpen: \"onMenuOpen\",\n    menuClosed: \"menuClosed\",\n    onMenuClose: \"onMenuClose\"\n  },\n  exportAs: [\"matMenuTrigger\"]\n});\n/** @nocollapse */\n\nMatMenuTrigger.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_SCROLL_STRATEGY]\n  }]\n}, {\n  type: MatMenu,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatMenuItem,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FocusMonitor\n}];\n\nMatMenuTrigger.propDecorators = {\n  _deprecatedMatMenuTriggerFor: [{\n    type: Input,\n    args: ['mat-menu-trigger-for']\n  }],\n  menu: [{\n    type: Input,\n    args: ['matMenuTriggerFor']\n  }],\n  menuData: [{\n    type: Input,\n    args: ['matMenuTriggerData']\n  }],\n  menuOpened: [{\n    type: Output\n  }],\n  onMenuOpen: [{\n    type: Output\n  }],\n  menuClosed: [{\n    type: Output\n  }],\n  onMenuClose: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n      host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'menuOpen || null',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick($event)'\n      },\n      exportAs: 'matMenuTrigger'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc4.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatMenu,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatMenuItem,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }];\n  }, {\n    menuOpened: [{\n      type: Output\n    }],\n    onMenuOpen: [{\n      type: Output\n    }],\n    menuClosed: [{\n      type: Output\n    }],\n    onMenuClose: [{\n      type: Output\n    }],\n    _deprecatedMatMenuTriggerFor: [{\n      type: Input,\n      args: ['mat-menu-trigger-for']\n    }],\n    menu: [{\n      type: Input,\n      args: ['matMenuTriggerFor']\n    }],\n    menuData: [{\n      type: Input,\n      args: ['matMenuTriggerData']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass MatMenuModule {}\n\nMatMenuModule.ɵfac = function MatMenuModule_Factory(t) {\n  return new (t || MatMenuModule)();\n};\n\nMatMenuModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatMenuModule\n});\nMatMenuModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule],\n      exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n      declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n      providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, {\n    declarations: function () {\n      return [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent];\n    },\n    imports: function () {\n      return [CommonModule, MatCommonModule, MatRippleModule, OverlayModule];\n    },\n    exports: function () {\n      return [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MAT_MENU_SCROLL_STRATEGY, MatMenuModule, MatMenu, MAT_MENU_DEFAULT_OPTIONS, MatMenuItem, MatMenuTrigger, matMenuAnimations, fadeInItems, transformMenu, MatMenuContent, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵa24, MatMenuItemBase as ɵb24, _MatMenuItemMixinBase as ɵc24, MAT_MENU_PANEL as ɵf24, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵd24, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵe24 };","map":{"version":3,"names":["Directive","TemplateRef","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","Inject","InjectionToken","ChangeDetectionStrategy","Component","ElementRef","ViewEncapsulation","Optional","Input","ContentChild","ContentChildren","EventEmitter","NgZone","Output","ViewChild","Self","NgModule","TemplatePortal","DomPortalOutlet","DOCUMENT","CommonModule","Subject","merge","Subscription","asapScheduler","of","trigger","state","style","animate","transition","query","group","FocusMonitor","FocusKeyManager","isFakeMousedownFromScreenReader","mixinDisabled","mixinDisableRipple","MatCommonModule","MatRippleModule","coerceBooleanProperty","ESCAPE","LEFT_ARROW","RIGHT_ARROW","DOWN_ARROW","UP_ARROW","startWith","switchMap","take","delay","filter","takeUntil","Directionality","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","_c1","MatMenu_ng_template_0_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatMenu_ng_template_0_Template_div_keydown_0_listener","$event","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","_handleKeydown","MatMenu_ng_template_0_Template_div_click_0_listener","ctx_r3","closed","emit","MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener","ctx_r4","_onAnimationStart","MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener","ctx_r5","_onAnimationDone","ɵɵprojection","ɵɵelementEnd","ctx_r0","ɵɵproperty","_classList","_panelAnimationState","MatMenuContent","constructor","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","attach","context","_portal","detach","_outlet","createElement","element","elementRef","nativeElement","parentNode","insertBefore","outletElement","next","isAttached","ngOnDestroy","dispose","ɵfac","MatMenuContent_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","selector","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","throwMatMenuMissingError","Error","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_elementRef","document","_focusMonitor","_parentMenu","role","_hovered","_highlighted","_triggersSubmenu","monitor","addItem","focus","origin","focusVia","_getHostElement","stopMonitoring","removeItem","complete","_getTabIndex","disabled","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length","i","nodeType","textContent","trim","MatMenuItem_Factory","ɵcmp","ɵɵdefineComponent","hostAttrs","hostVars","hostBindings","MatMenuItem_HostBindings","MatMenuItem_click_HostBindingHandler","MatMenuItem_mouseenter_HostBindingHandler","ɵɵattribute","toString","ɵɵclassProp","inputs","disableRipple","exportAs","features","ɵɵInheritDefinitionFeature","attrs","ngContentSelectors","decls","vars","consts","template","MatMenuItem_Template","ɵɵprojectionDef","ɵɵelement","ɵɵadvance","dependencies","MatRipple","encapsulation","changeDetection","propDecorators","host","OnPush","None","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","MAT_MENU_BASE_ELEVATION","MatMenu","_ngZone","_defaultOptions","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","EMPTY","_animationDone","_overlapTrigger","_hasBackdrop","hasBackdrop","close","value","setPositionClasses","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","classList","ngOnInit","ngAfterContentInit","_keyManager","withWrap","withTypeAhead","tabOut","subscribe","unsubscribe","pipe","items","map","item","keyCode","parentMenu","direction","setFocusOrigin","onKeydown","focusFirstItem","lazyContent","onStable","asObservable","setFirstItemActive","resetActiveItem","setActiveItem","setElevation","depth","newElevation","customElevation","Object","keys","find","c","startsWith","_previousElevation","indexOf","push","index","splice","posX","posY","_startAnimation","_resetAnimation","_isAnimating","toState","activeItemIndex","scrollTop","MatMenu_Factory","contentQueries","MatMenu_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","viewQuery","MatMenu_Query","ɵɵviewQuery","templateRef","outputs","ɵɵProvidersFeature","provide","useExisting","MatMenu_Template","ɵɵtemplate","NgClass","styles","data","animation","animations","providers","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MENU_PANEL_TOP_PADDING","passiveEventListenerOptions","passive","MatMenuTrigger","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","addEventListener","triggersSubmenu","_scrollStrategy","_deprecatedMatMenuTriggerFor","menu","v","_menu","reason","_destroyMenu","_checkMenu","_handleHover","removeEventListener","_cleanUpSubscriptions","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","_setPosition","positionStrategy","_getPortal","menuData","_menuClosingActions","_initMenu","_resetMenu","_setMenuElevation","_setIsMenuOpen","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withLockedPosition","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","_handleMousedown","button","_handleClick","MatMenuTrigger_Factory","MatMenuTrigger_HostBindings","MatMenuTrigger_mousedown_HostBindingHandler","MatMenuTrigger_keydown_HostBindingHandler","MatMenuTrigger_click_HostBindingHandler","MatMenuModule","MatMenuModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ɵa24","ɵb24","ɵc24","ɵf24","ɵd24","ɵe24"],"sources":["/Users/apple/Desktop/zepto/my_project/node_modules/@angular/material/__ivy_ngcc__/esm2015/menu.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, InjectionToken, ChangeDetectionStrategy, Component, ElementRef, ViewEncapsulation, Optional, Input, ContentChild, ContentChildren, EventEmitter, NgZone, Output, ViewChild, Self, NgModule } from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject, merge, Subscription, asapScheduler, of } from 'rxjs';\nimport { trigger, state, style, animate, transition, query, group } from '@angular/animations';\nimport { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { mixinDisabled, mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { startWith, switchMap, take, delay, filter, takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\n\nconst _c0 = [\"mat-menu-item\", \"\"];\nconst _c1 = [\"*\"];\nfunction MatMenu_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1._handleKeydown($event)); })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r3.closed.emit(\"click\")); })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r4._onAnimationStart($event)); })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r5._onAnimationDone($event)); });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n} }\nclass MatMenuContent {\n    /**\n     * @param {?} _template\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _injector\n     * @param {?} _viewContainerRef\n     * @param {?} _document\n     */\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        /**\n         * Emits when the menu content has been attached.\n         */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * \\@docs-private\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        /** @type {?} */\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        (/** @type {?} */ (element.parentNode)).insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\nMatMenuContent.ɵfac = function MatMenuContent_Factory(t) { return new (t || MatMenuContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatMenuContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatMenuContent, selectors: [[\"ng-template\", \"matMenuContent\", \"\"]] });\n/** @nocollapse */\nMatMenuContent.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: Injector },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matMenuContent]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * \\@docs-private\n * @type {?}\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mat-menu-content', animate('100ms linear', style({ opacity: 1 }))),\n            animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n        ])),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/**\n * \\@docs-private\n */\nclass MatMenuItemBase {\n}\n/** @type {?} */\nconst _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\nclass MatMenuItem extends _MatMenuItemMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?=} document\n     * @param {?=} _focusMonitor\n     * @param {?=} _parentMenu\n     */\n    constructor(_elementRef, document, _focusMonitor, _parentMenu) {\n        // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n        super();\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        /**\n         * ARIA role for the menu item.\n         */\n        this.role = 'menuitem';\n        /**\n         * Stream that emits when the menu item is hovered.\n         */\n        this._hovered = new Subject();\n        /**\n         * Whether the menu item is highlighted.\n         */\n        this._highlighted = false;\n        /**\n         * Whether the menu item acts as a trigger for a sub-menu.\n         */\n        this._triggersSubmenu = false;\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef, false);\n        }\n        if (_parentMenu && _parentMenu.addItem) {\n            _parentMenu.addItem(this);\n        }\n        this._document = document;\n    }\n    /**\n     * Focuses the menu item.\n     * @param {?=} origin\n     * @return {?}\n     */\n    focus(origin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        }\n        else {\n            this._getHostElement().focus();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n    }\n    /**\n     * Used to set the `tabindex`.\n     * @return {?}\n     */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /**\n     * Returns the host DOM element.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /**\n     * Prevents the default element actions if it is disabled.\n     * @param {?} event\n     * @return {?}\n     */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Emits to the hover stream.\n     * @return {?}\n     */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /**\n     * Gets the label to be used when determining whether the option should be focused.\n     * @return {?}\n     */\n    getLabel() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        /** @type {?} */\n        let output = '';\n        if (element.childNodes) {\n            /** @type {?} */\n            const length = element.childNodes.length;\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n        return output.trim();\n    }\n}\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) { return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8)); };\nMatMenuItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatMenuItem, selectors: [[\"\", \"mat-menu-item\", \"\"]], hostAttrs: [1, \"mat-menu-item\"], hostVars: 8, hostBindings: function MatMenuItem_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) { return ctx._checkDisabled($event); })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() { return ctx._handleMouseEnter(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, exportAs: [\"matMenuItem\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 2, vars: 2, consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"]], template: function MatMenuItem_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n    } }, dependencies: [ɵngcc2.MatRipple], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatMenuItem.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] }\n];\nMatMenuItem.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuItem, [{\n        type: Component,\n        args: [{ selector: '[mat-menu-item]',\n                exportAs: 'matMenuItem',\n                inputs: ['disabled', 'disableRipple'],\n                host: {\n                    '[attr.role]': 'role',\n                    'class': 'mat-menu-item',\n                    '[class.mat-menu-item-highlighted]': '_highlighted',\n                    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.disabled]': 'disabled || null',\n                    '(click)': '_checkDisabled($event)',\n                    '(mouseenter)': '_handleMouseEnter()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                template: \"<ng-content></ng-content><div class=\\\"mat-menu-ripple\\\" matRipple [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\"\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc1.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_PANEL]\n            }, {\n                type: Optional\n            }] }]; }, { role: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for `mat-menu`.\n * @type {?}\n */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\nclass MatMenu {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _ngZone, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /**\n         * Menu items inside the current menu.\n         */\n        this._items = [];\n        /**\n         * Emits whenever the amount of menu items changes.\n         */\n        this._itemChanges = new Subject();\n        /**\n         * Subscription to tab events on the menu panel\n         */\n        this._tabSubscription = Subscription.EMPTY;\n        /**\n         * Config object to be passed into the menu's ngClass\n         */\n        this._classList = {};\n        /**\n         * Current state of the panel animation.\n         */\n        this._panelAnimationState = 'void';\n        /**\n         * Emits whenever an animation on the menu completes.\n         */\n        this._animationDone = new Subject();\n        /**\n         * Class to be added to the backdrop element.\n         */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /**\n         * Event emitted when the menu is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * \\@breaking-change 8.0.0\n         */\n        this.close = this.closed;\n    }\n    /**\n     * Position of the menu in the X axis.\n     * @return {?}\n     */\n    get xPosition() { return this._xPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set xPosition(value) {\n        if (value !== 'before' && value !== 'after') {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /**\n     * Position of the menu in the Y axis.\n     * @return {?}\n     */\n    get yPosition() { return this._yPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below') {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /**\n     * Whether the menu should overlap its trigger.\n     * @return {?}\n     */\n    get overlapTrigger() { return this._overlapTrigger; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the menu has a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param {?} classes list of class names\n     * @return {?}\n     */\n    set panelClass(classes) {\n        /** @type {?} */\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    get classList() { return this.panelClass; }\n    /**\n     * @param {?} classes\n     * @return {?}\n     */\n    set classList(classes) { this.panelClass = classes; }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this._items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /**\n     * Stream that emits whenever the hovered menu item changes.\n     * @return {?}\n     */\n    _hovered() {\n        return this._itemChanges.pipe(startWith(this._items), switchMap(items => merge(...items.map(item => item._hovered))));\n    }\n    /**\n     * Handle a keyboard event from the menu, delegating to the appropriate action.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this._keyManager.setFocusOrigin('keyboard');\n                }\n                this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param {?=} origin Action from which the focus originated. Used to set the correct styling.\n     * @return {?}\n     */\n    focusFirstItem(origin = 'program') {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        }\n        else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     * @return {?}\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param {?} depth Number of parent menus that come before the menu.\n     * @return {?}\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        /** @type {?} */\n        const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n        /** @type {?} */\n        const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Registers a menu item with the menu.\n     * \\@docs-private\n     * @param {?} item\n     * @return {?}\n     */\n    addItem(item) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level menu in the case where the consumer\n        // has `mat-menu` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n    /**\n     * Removes an item from the menu.\n     * \\@docs-private\n     * @param {?} item\n     * @return {?}\n     */\n    removeItem(item) {\n        /** @type {?} */\n        const index = this._items.indexOf(item);\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * \\@docs-private\n     * @param {?=} posX Position of the menu along the x axis.\n     * @param {?=} posY Position of the menu along the y axis.\n     * @return {?}\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        /** @type {?} */\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n    }\n    /**\n     * Starts the enter animation.\n     * @return {?}\n     */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /**\n     * Resets the panel animation to its initial state.\n     * @return {?}\n     */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /**\n     * Callback that is invoked when the panel animation completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\nMatMenu.ɵfac = function MatMenu_Factory(t) { return new (t || MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS)); };\nMatMenu.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatMenu, selectors: [[\"mat-menu\"]], contentQueries: function MatMenu_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n    } }, viewQuery: function MatMenu_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    } }, inputs: { backdropClass: \"backdropClass\", xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, exportAs: [\"matMenu\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_MENU_PANEL, useExisting: MatMenu }\n        ])], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]], template: function MatMenu_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, dependencies: [ɵngcc3.NgClass], styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0}.mat-menu-panel.ng-animating{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}@media (-ms-high-contrast:active){.mat-menu-item-highlighted,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item.cdk-program-focused{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], encapsulation: 2, data: { animation: [\n            matMenuAnimations.transformMenu,\n            matMenuAnimations.fadeInItems\n        ] }, changeDetection: 0 });\n/** @nocollapse */\nMatMenu.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\nMatMenu.propDecorators = {\n    backdropClass: [{ type: Input }],\n    xPosition: [{ type: Input }],\n    yPosition: [{ type: Input }],\n    templateRef: [{ type: ViewChild, args: [TemplateRef,] }],\n    items: [{ type: ContentChildren, args: [MatMenuItem,] }],\n    lazyContent: [{ type: ContentChild, args: [MatMenuContent,] }],\n    overlapTrigger: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    panelClass: [{ type: Input, args: ['class',] }],\n    classList: [{ type: Input }],\n    closed: [{ type: Output }],\n    close: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenu, [{\n        type: Component,\n        args: [{ selector: 'mat-menu', template: \"<ng-template><div class=\\\"mat-menu-panel\\\" [ngClass]=\\\"_classList\\\" (keydown)=\\\"_handleKeydown($event)\\\" (click)=\\\"closed.emit('click')\\\" [@transformMenu]=\\\"_panelAnimationState\\\" (@transformMenu.start)=\\\"_onAnimationStart($event)\\\" (@transformMenu.done)=\\\"_onAnimationDone($event)\\\" tabindex=\\\"-1\\\" role=\\\"menu\\\"><div class=\\\"mat-menu-content\\\"><ng-content></ng-content></div></div></ng-template>\", changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', animations: [\n                    matMenuAnimations.transformMenu,\n                    matMenuAnimations.fadeInItems\n                ], providers: [\n                    { provide: MAT_MENU_PANEL, useExisting: MatMenu }\n                ], styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0}.mat-menu-panel.ng-animating{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}@media (-ms-high-contrast:active){.mat-menu-item-highlighted,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item.cdk-program-focused{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_DEFAULT_OPTIONS]\n            }] }]; }, { backdropClass: [{\n            type: Input\n        }], closed: [{\n            type: Output\n        }], close: [{\n            type: Output\n        }], xPosition: [{\n            type: Input\n        }], yPosition: [{\n            type: Input\n        }], overlapTrigger: [{\n            type: Input\n        }], hasBackdrop: [{\n            type: Input\n        }], panelClass: [{\n            type: Input,\n            args: ['class']\n        }], classList: [{\n            type: Input\n        }], templateRef: [{\n            type: ViewChild,\n            args: [TemplateRef]\n        }], items: [{\n            type: ContentChildren,\n            args: [MatMenuItem]\n        }], lazyContent: [{\n            type: ContentChild,\n            args: [MatMenuContent]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that determines the scroll handling while the menu is open.\n * @type {?}\n */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n * @type {?}\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/**\n * Options for binding a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nclass MatMenuTrigger {\n    /**\n     * @param {?} _overlay\n     * @param {?} _element\n     * @param {?} _viewContainerRef\n     * @param {?} scrollStrategy\n     * @param {?} _parentMenu\n     * @param {?} _menuItemInstance\n     * @param {?} _dir\n     * @param {?=} _focusMonitor\n     */\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._parentMenu = _parentMenu;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = () => this._openedBy = 'touch';\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = null;\n        /**\n         * Event emitted when the associated menu is opened.\n         */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * \\@breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /**\n         * Event emitted when the associated menu is closed.\n         */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * \\@breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    get _deprecatedMatMenuTriggerFor() { return this.menu; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /**\n     * References the menu instance that the trigger is associated with.\n     * @return {?}\n     */\n    get menu() { return this._menu; }\n    /**\n     * @param {?} menu\n     * @return {?}\n     */\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n                this._destroyMenu();\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n                    this._parentMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._cleanUpSubscriptions();\n        this._closingActionsSubscription.unsubscribe();\n    }\n    /**\n     * Whether the menu is open.\n     * @return {?}\n     */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Whether the menu triggers a sub-menu or a top-level one.\n     * @return {?}\n     */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMenu);\n    }\n    /**\n     * Toggles the menu between the open and closed states.\n     * @return {?}\n     */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /**\n     * Opens the menu.\n     * @return {?}\n     */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        /** @type {?} */\n        const overlayRef = this._createOverlay();\n        /** @type {?} */\n        const overlayConfig = overlayRef.getConfig();\n        this._setPosition((/** @type {?} */ (overlayConfig.positionStrategy)));\n        overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n            this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu();\n        if (this.menu instanceof MatMenu) {\n            this.menu._startAnimation();\n        }\n    }\n    /**\n     * Closes the menu.\n     * @return {?}\n     */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param {?=} origin Source of the menu trigger's focus.\n     * @return {?}\n     */\n    focus(origin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element, origin);\n        }\n        else {\n            this._element.nativeElement.focus();\n        }\n    }\n    /**\n     * Closes the menu and does the necessary cleanup.\n     * @private\n     * @return {?}\n     */\n    _destroyMenu() {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        /** @type {?} */\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        if (menu instanceof MatMenu) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe(() => (/** @type {?} */ (menu.lazyContent)).detach(), undefined, () => {\n                    // No matter whether the content got re-attached, reset the menu.\n                    this._resetMenu();\n                });\n            }\n            else {\n                this._resetMenu();\n            }\n        }\n        else {\n            this._resetMenu();\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     * @private\n     * @return {?}\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this._setIsMenuOpen(true);\n        this.menu.focusFirstItem(this._openedBy || 'program');\n    }\n    /**\n     * Updates the menu elevation based on the amount of parent menus that it has.\n     * @private\n     * @return {?}\n     */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            /** @type {?} */\n            let depth = 0;\n            /** @type {?} */\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    /**\n     * This method resets the menu when it's closed, most importantly restoring\n     * focus to the menu trigger if the menu was opened via the keyboard.\n     * @private\n     * @return {?}\n     */\n    _resetMenu() {\n        this._setIsMenuOpen(false);\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        }\n        else if (!this.triggersSubmenu()) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = null;\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    /**\n     * @private\n     * @param {?} isOpen\n     * @return {?}\n     */\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._highlighted = isOpen;\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     * @private\n     * @return {?}\n     */\n    _checkMenu() {\n        if (!this.menu) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            /** @type {?} */\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions((/** @type {?} */ (config.positionStrategy)));\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @private\n     * @return {?} OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mat-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                /** @type {?} */\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                /** @type {?} */\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                (/** @type {?} */ (this.menu.setPositionClasses))(posX, posY);\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @private\n     * @param {?} positionStrategy Strategy whose position to update.\n     * @return {?}\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        /** @type {?} */\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n    /**\n     * Cleans up the active subscriptions.\n     * @private\n     * @return {?}\n     */\n    _cleanUpSubscriptions() {\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /**\n     * Returns a stream that emits whenever an action that should close the menu occurs.\n     * @private\n     * @return {?}\n     */\n    _menuClosingActions() {\n        /** @type {?} */\n        const backdrop = (/** @type {?} */ (this._overlayRef)).backdropClick();\n        /** @type {?} */\n        const detachments = (/** @type {?} */ (this._overlayRef)).detachments();\n        /** @type {?} */\n        const parentClose = this._parentMenu ? this._parentMenu.closed : of();\n        /** @type {?} */\n        const hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /**\n     * Handles mouse presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : null;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * Handles key presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        if (this.triggersSubmenu() && ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.openMenu();\n        }\n    }\n    /**\n     * Handles click events on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /**\n     * Handles the cases where the user hovers over the trigger.\n     * @private\n     * @return {?}\n     */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu()) {\n            return;\n        }\n        this._hoverSubscription = this._parentMenu._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /**\n     * Gets the portal that should be attached to the overlay.\n     * @private\n     * @return {?}\n     */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\nMatMenuTrigger.ɵfac = function MatMenuTrigger_Factory(t) { return new (t || MatMenuTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MatMenu, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\nMatMenuTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatMenuTrigger, selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]], hostAttrs: [\"aria-haspopup\", \"true\"], hostVars: 1, hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MatMenuTrigger_mousedown_HostBindingHandler($event) { return ctx._handleMousedown($event); })(\"keydown\", function MatMenuTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"click\", function MatMenuTrigger_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.menuOpen || null);\n    } }, inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, exportAs: [\"matMenuTrigger\"] });\n/** @nocollapse */\nMatMenuTrigger.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_SCROLL_STRATEGY,] }] },\n    { type: MatMenu, decorators: [{ type: Optional }] },\n    { type: MatMenuItem, decorators: [{ type: Optional }, { type: Self }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: FocusMonitor }\n];\nMatMenuTrigger.propDecorators = {\n    _deprecatedMatMenuTriggerFor: [{ type: Input, args: ['mat-menu-trigger-for',] }],\n    menu: [{ type: Input, args: ['matMenuTriggerFor',] }],\n    menuData: [{ type: Input, args: ['matMenuTriggerData',] }],\n    menuOpened: [{ type: Output }],\n    onMenuOpen: [{ type: Output }],\n    menuClosed: [{ type: Output }],\n    onMenuClose: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                host: {\n                    'aria-haspopup': 'true',\n                    '[attr.aria-expanded]': 'menuOpen || null',\n                    '(mousedown)': '_handleMousedown($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(click)': '_handleClick($event)'\n                },\n                exportAs: 'matMenuTrigger'\n            }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_SCROLL_STRATEGY]\n            }] }, { type: MatMenu, decorators: [{\n                type: Optional\n            }] }, { type: MatMenuItem, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc1.FocusMonitor }]; }, { menuOpened: [{\n            type: Output\n        }], onMenuOpen: [{\n            type: Output\n        }], menuClosed: [{\n            type: Output\n        }], onMenuClose: [{\n            type: Output\n        }], _deprecatedMatMenuTriggerFor: [{\n            type: Input,\n            args: ['mat-menu-trigger-for']\n        }], menu: [{\n            type: Input,\n            args: ['matMenuTriggerFor']\n        }], menuData: [{\n            type: Input,\n            args: ['matMenuTriggerData']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatMenuModule {\n}\nMatMenuModule.ɵfac = function MatMenuModule_Factory(t) { return new (t || MatMenuModule)(); };\nMatMenuModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatMenuModule });\nMatMenuModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule,\n        MatCommonModule,\n        MatRippleModule,\n        OverlayModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    MatRippleModule,\n                    OverlayModule,\n                ],\n                exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n                declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, { declarations: function () { return [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        MatRippleModule,\n        OverlayModule]; }, exports: function () { return [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_MENU_SCROLL_STRATEGY, MatMenuModule, MatMenu, MAT_MENU_DEFAULT_OPTIONS, MatMenuItem, MatMenuTrigger, matMenuAnimations, fadeInItems, transformMenu, MatMenuContent, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵa24, MatMenuItemBase as ɵb24, _MatMenuItemMixinBase as ɵc24, MAT_MENU_PANEL as ɵf24, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵd24, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵe24 };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}