{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, Inject, Optional, ViewContainerRef, Attribute, ContentChildren, ElementRef, Input, IterableDiffers, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\n\nclass MatTreeNodeOutlet {\n  /**\n   * @param {?} viewContainer\n   * @param {?=} _node\n   */\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n\n}\n\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nMatTreeNodeOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TREE_NODE_OUTLET_NODE]\n  }, {\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/** @type {?} */\n\n\nconst _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\n\n\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} tabIndex\n   */\n  constructor(_elementRef, _tree, tabIndex) {\n    super(_elementRef, _tree);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this.role = 'treeitem';\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n}\n\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  hostAttrs: [1, \"mat-tree-node\"],\n  hostVars: 3,\n  hostBindings: function MatTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    role: \"role\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\n\nMatTreeNode.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['disabled', 'tabIndex'],\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        'class': 'mat-tree-node'\n      },\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\n\n\nclass MatTreeNodeDef extends CdkTreeNodeDef {}\n\nMatTreeNodeDef.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodeDef_BaseFactory;\n  return function MatTreeNodeDef_Factory(t) {\n    return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n  };\n}();\n\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeDef.propDecorators = {\n  data: [{\n    type: Input,\n    args: ['matTreeNode']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\n\n\nclass MatNestedTreeNode extends _MatNestedTreeNodeMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} _differs\n   * @param {?} tabIndex\n   */\n  constructor(_elementRef, _tree, _differs, tabIndex) {\n    super(_elementRef, _tree, _differs);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this._differs = _differs;\n    this.tabIndex = Number(tabIndex) || 0;\n  } // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n}\n\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  contentQueries: function MatNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatTreeNodeOutlet, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-nested-tree-node\"],\n  hostVars: 2,\n  hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatNestedTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: IterableDiffers\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\n\nMatNestedTreeNode.propDecorators = {\n  node: [{\n    type: Input,\n    args: ['matNestedTreeNode']\n  }],\n  nodeOutlet: [{\n    type: ContentChildren,\n    args: [MatTreeNodeOutlet, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        'class': 'mat-nested-tree-node'\n      },\n      inputs: ['disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [MatTreeNodeOutlet, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\n\n\nclass MatTreeNodePadding extends CdkTreeNodePadding {}\n\nMatTreeNodePadding.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodePadding_BaseFactory;\n  return function MatTreeNodePadding_Factory(t) {\n    return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n  };\n}();\n\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['matTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['matTreeNodePaddingIndent']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\n\n\nclass MatTree extends CdkTree {}\n\nMatTree.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTree_BaseFactory;\n  return function MatTree_Factory(t) {\n    return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n  };\n}();\n\nMatTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n  exportAs: [\"matTree\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n  encapsulation: 2\n});\nMatTree.propDecorators = {\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [MatTreeNodeOutlet]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\n\n\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  constructor() {\n    super(...arguments);\n    this.recursive = false;\n  }\n\n}\n\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodeToggle_BaseFactory;\n  return function MatTreeNodeToggle_Factory(t) {\n    return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n  };\n}();\n\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['matTreeNodeToggleRecursive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['matTreeNodeToggleRecursive']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n\nclass MatTreeModule {}\n\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n  return new (t || MatTreeModule)();\n};\n\nMatTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, CommonModule, MatCommonModule],\n      exports: MAT_TREE_DIRECTIVES,\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function () {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function () {\n      return [CdkTreeModule, CommonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\n\n\nclass MatTreeFlattener {\n  /**\n   * @param {?} transformFunction\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   * @param {?} getChildren\n   */\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  /**\n   * @param {?} node\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n\n\n  _flattenNode(node, level, resultNodes, parentMap) {\n    /** @type {?} */\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      /** @type {?} */\n      const childrenNodes = this.getChildren(node);\n\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n\n    return resultNodes;\n  }\n  /**\n   * @param {?} children\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n\n\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      /** @type {?} */\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   * @param {?} structuredData\n   * @return {?}\n   */\n\n\n  flattenNodes(structuredData) {\n    /** @type {?} */\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   * @param {?} nodes\n   * @param {?} treeControl\n   * @return {?}\n   */\n\n\n  expandFlattenedNodes(nodes, treeControl) {\n    /** @type {?} */\n    let results = [];\n    /** @type {?} */\n\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      /** @type {?} */\n      let expand = true;\n\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n\n      if (expand) {\n        results.push(node);\n      }\n\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\n\n\nclass MatTreeFlatDataSource extends DataSource {\n  /**\n   * @param {?} treeControl\n   * @param {?} treeFlattener\n   * @param {?=} initialData\n   */\n  constructor(treeControl, treeFlattener, initialData = []) {\n    super();\n    this.treeControl = treeControl;\n    this.treeFlattener = treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject(initialData);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get data() {\n    return this._data.value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set data(value) {\n    this._data.next(value);\n\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n  /**\n   * @param {?} collectionViewer\n   * @return {?}\n   */\n\n\n  connect(collectionViewer) {\n    /** @type {?} */\n    const changes = [collectionViewer.viewChange, this.treeControl.expansionModel.onChange, this._flattenedData];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n      return this._expandedData.value;\n    }));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  disconnect() {// no op\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\n\n\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   * @return {?}\n   */\n\n\n  get data() {\n    return this._data.value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set data(value) {\n    this._data.next(value);\n  }\n  /**\n   * @param {?} collectionViewer\n   * @return {?}\n   */\n\n\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => {\n      return this.data;\n    }));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  disconnect() {// no op\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };","map":{"version":3,"names":["CDK_TREE_NODE_OUTLET_NODE","CdkNestedTreeNode","CdkTree","CdkTreeNode","CdkTreeNodeDef","CdkTreeNodePadding","CdkTreeNodeToggle","CdkTreeModule","Directive","Inject","Optional","ViewContainerRef","Attribute","ContentChildren","ElementRef","Input","IterableDiffers","ChangeDetectionStrategy","Component","ViewChild","ViewEncapsulation","NgModule","mixinDisabled","mixinTabIndex","MatCommonModule","CommonModule","DataSource","BehaviorSubject","merge","map","take","ɵngcc0","ɵngcc1","MatTreeNodeOutlet","constructor","viewContainer","_node","ɵfac","MatTreeNodeOutlet_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","selector","_MatTreeNodeMixinBase","_MatNestedTreeNodeMixinBase","MatTreeNode","_elementRef","_tree","tabIndex","role","Number","MatTreeNode_Factory","ɵɵinjectAttribute","hostAttrs","hostVars","hostBindings","MatTreeNode_HostBindings","rf","ctx","ɵɵattribute","isExpanded","level","inputs","disabled","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","String","propDecorators","host","providers","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","MatNestedTreeNode_Factory","contentQueries","MatNestedTreeNode_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","nodeOutlet","MatNestedTreeNode_HostBindings","node","descendants","MatTreeNodePadding","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","indent","MatTree","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","ɵɵviewQuery","_nodeOutlet","first","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","dependencies","styles","encapsulation","None","changeDetection","Default","MatTreeNodeToggle","arguments","recursive","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","_expandedData","_data","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","disconnect","MatTreeNestedDataSource"],"sources":["/Users/apple/Desktop/zepto/my_project/node_modules/@angular/material/__ivy_ngcc__/esm2015/tree.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, Inject, Optional, ViewContainerRef, Attribute, ContentChildren, ElementRef, Input, IterableDiffers, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nclass MatTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]] });\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/** @type {?} */\nconst _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, tabIndex) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this.role = 'treeitem';\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], hostAttrs: [1, \"mat-tree-node\"], hostVars: 3, hostBindings: function MatTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", role: \"role\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['disabled', 'tabIndex'],\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'mat-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { role: [{\n            type: Input\n        }] }); })();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeDef_BaseFactory; return function MatTreeNodeDef_Factory(t) { return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef); }; }();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends _MatNestedTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, _differs, tabIndex) {\n        super(_elementRef, _tree, _differs);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], contentQueries: function MatNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, hostAttrs: [1, \"mat-nested-tree-node\"], hostVars: 2, hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    nodeOutlet: [{ type: ContentChildren, args: [MatTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'mat-nested-tree-node'\n                },\n                inputs: ['disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }], nodeOutlet: [{\n            type: ContentChildren,\n            args: [MatTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodePadding_BaseFactory; return function MatTreeNodePadding_Factory(t) { return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding); }; }();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = /*@__PURE__*/ function () { let ɵMatTree_BaseFactory; return function MatTree_Factory(t) { return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree); }; }();\nMatTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                    'class': 'mat-tree',\n                    'role': 'tree'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"] }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    constructor() {\n        super(...arguments);\n        this.recursive = false;\n    }\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeToggle_BaseFactory; return function MatTreeNodeToggle_Factory(t) { return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle); }; }();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); };\nMatTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CdkTreeModule, CommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, CommonModule, MatCommonModule],\n                exports: MAT_TREE_DIRECTIVES,\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, CommonModule, MatCommonModule]; }, exports: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n    /**\n     * @param {?} transformFunction\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     * @param {?} getChildren\n     */\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenNode(node, level, resultNodes, parentMap) {\n        /** @type {?} */\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            /** @type {?} */\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            /** @type {?} */\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    flattenNodes(structuredData) {\n        /** @type {?} */\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        /** @type {?} */\n        let results = [];\n        /** @type {?} */\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            /** @type {?} */\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n    /**\n     * @param {?} treeControl\n     * @param {?} treeFlattener\n     * @param {?=} initialData\n     */\n    constructor(treeControl, treeFlattener, initialData = []) {\n        super();\n        this.treeControl = treeControl;\n        this.treeFlattener = treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        /** @type {?} */\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange,\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) { this._data.next(value); }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => {\n            return this.data;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}