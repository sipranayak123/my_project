{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, animateChild, query, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/form-field';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState));\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r10._handleKeydown($event));\n    });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n  }\n}\n\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * \\@breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [state('showing', style({\n    opacity: 1\n  })), transition('void => showing', [style({\n    opacity: 0\n  }), animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\nconst transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\nconst fadeInContent = matSelectAnimations.fadeInContent;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nlet nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\n\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\n\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\n\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\n\nconst SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\n\nlet SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\n\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\n\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\n\nclass MatSelectChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n\n} // Boilerplate for applying mixins to MatSelect.\n\n/**\n * \\@docs-private\n */\n\n\nclass MatSelectBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} ngControl\n   */\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}\n/** @type {?} */\n\n\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\n\nclass MatSelectTrigger {}\n\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\n\nMatSelectTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger'\n    }]\n  }], null, null);\n})();\n\nclass MatSelect extends _MatSelectMixinBase {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} _changeDetectorRef\n   * @param {?} _ngZone\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} elementRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _parentFormField\n   * @param {?} ngControl\n   * @param {?} tabIndex\n   * @param {?} scrollStrategyFactory\n   * @param {?=} _liveAnnouncer\n   */\n  constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._viewportRuler = _viewportRuler;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this._dir = _dir;\n    this._parentFormField = _parentFormField;\n    this.ngControl = ngControl;\n    this._liveAnnouncer = _liveAnnouncer;\n    /**\n     * Whether or not the overlay panel is open.\n     */\n\n    this._panelOpen = false;\n    /**\n     * Whether filling out the select is required in the form.\n     */\n\n    this._required = false;\n    /**\n     * The scroll position of the overlay panel, calculated to center the selected option.\n     */\n\n    this._scrollTop = 0;\n    /**\n     * Whether the component is in multiple selection mode.\n     */\n\n    this._multiple = false;\n    /**\n     * Comparison function to specify which option is displayed. Defaults to object equality.\n     */\n\n    this._compareWith = (o1, o2) => o1 === o2;\n    /**\n     * Unique id for this input.\n     */\n\n\n    this._uid = `mat-select-${nextUniqueId++}`;\n    /**\n     * Emits whenever the component is destroyed.\n     */\n\n    this._destroy = new Subject();\n    /**\n     * The cached font-size of the trigger element.\n     */\n\n    this._triggerFontSize = 0;\n    /**\n     * `View -> model callback called when value changes`\n     */\n\n    this._onChange = () => {};\n    /**\n     * `View -> model callback called when select has been touched`\n     */\n\n\n    this._onTouched = () => {};\n    /**\n     * The IDs of child options to be passed to the aria-owns attribute.\n     */\n\n\n    this._optionIds = '';\n    /**\n     * The value of the select panel's transform-origin property.\n     */\n\n    this._transformOrigin = 'top';\n    /**\n     * Emits when the panel element is finished transforming in.\n     */\n\n    this._panelDoneAnimatingStream = new Subject();\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n\n    this._offsetY = 0;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n\n    this._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n    /**\n     * Whether the component is disabling centering of the active option over the trigger.\n     */\n\n    this._disableOptionCentering = false;\n    this._focused = false;\n    /**\n     * A name for this control that can be used by `mat-form-field`.\n     */\n\n    this.controlType = 'mat-select';\n    /**\n     * Aria label of the select. If not specified, the placeholder will be used as label.\n     */\n\n    this.ariaLabel = '';\n    /**\n     * Combined stream of all of the child options' change events.\n     */\n\n    this.optionSelectionChanges = defer(() => {\n      if (this.options) {\n        return merge(...this.options.map(option => option.onSelectionChange));\n      }\n\n      return this._ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n    /**\n     * Event emitted when the select panel has been toggled.\n     */\n\n    this.openedChange = new EventEmitter();\n    /**\n     * Event emitted when the select has been opened.\n     */\n\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /**\n     * Event emitted when the select has been closed.\n     */\n\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /**\n     * Event emitted when the selected value has been changed by the user.\n     */\n\n    this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n    this.id = this.id;\n  }\n  /**\n   * Whether the select is focused.\n   * @return {?}\n   */\n\n\n  get focused() {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * \\@breaking-change 8.0.0\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set focused(value) {\n    this._focused = value;\n  }\n  /**\n   * Placeholder to be shown if no value has been selected.\n   * @return {?}\n   */\n\n\n  get placeholder() {\n    return this._placeholder;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /**\n   * Whether the component is required.\n   * @return {?}\n   */\n\n\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Whether the user should be allowed to select multiple options.\n   * @return {?}\n   */\n\n\n  get multiple() {\n    return this._multiple;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set multiple(value) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether to center the active option over the trigger.\n   * @return {?}\n   */\n\n\n  get disableOptionCentering() {\n    return this._disableOptionCentering;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set disableOptionCentering(value) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   * @return {?}\n   */\n\n\n  get compareWith() {\n    return this._compareWith;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  set compareWith(fn) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n\n    this._compareWith = fn;\n\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Value of the select control.\n   * @return {?}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n\n\n  set value(newValue) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  /**\n   * Unique id of the element.\n   * @return {?}\n   */\n\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set id(value) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple);\n    this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n\n    this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._scrollTop = 0;\n        this.openedChange.emit(true);\n      } else {\n        this.openedChange.emit(false);\n        this.overlayDir.offsetX = 0;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n\n      this._initializeSelection();\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._destroy.next();\n\n    this._destroy.complete();\n\n    this.stateChanges.complete();\n  }\n  /**\n   * Toggles the overlay panel open or closed.\n   * @return {?}\n   */\n\n\n  toggle() {\n    this.panelOpen ? this.close() : this.open();\n  }\n  /**\n   * Opens the overlay panel.\n   * @return {?}\n   */\n\n\n  open() {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n    this._panelOpen = true;\n\n    this._keyManager.withHorizontalOrientation(null);\n\n    this._calculateOverlayPosition();\n\n    this._highlightCorrectOption();\n\n    this._changeDetectorRef.markForCheck(); // Set the font size on the panel element once it exists.\n\n\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n  /**\n   * Closes the overlay panel and focuses the host element.\n   * @return {?}\n   */\n\n\n  close() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._changeDetectorRef.markForCheck();\n\n      this._onTouched();\n    }\n  }\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param {?} value New value to be written to the model.\n   * @return {?}\n   */\n\n\n  writeValue(value) {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param {?} fn Callback to be triggered when the value changes.\n   * @return {?}\n   */\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param {?} fn Callback to be triggered when the component has been touched.\n   * @return {?}\n   */\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param {?} isDisabled Sets whether the component is disabled.\n   * @return {?}\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n\n    this._changeDetectorRef.markForCheck();\n\n    this.stateChanges.next();\n  }\n  /**\n   * Whether or not the overlay panel is open.\n   * @return {?}\n   */\n\n\n  get panelOpen() {\n    return this._panelOpen;\n  }\n  /**\n   * The currently selected option.\n   * @return {?}\n   */\n\n\n  get selected() {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n  /**\n   * The value displayed in the trigger.\n   * @return {?}\n   */\n\n\n  get triggerValue() {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      /** @type {?} */\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n  /**\n   * Whether the element is in RTL mode.\n   * @return {?}\n   */\n\n\n  _isRtl() {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n  /**\n   * Handles all keydown events on the select.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleKeydown(event) {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n  /**\n   * Handles keyboard events while the select is closed.\n   * @private\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleClosedKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    /** @type {?} */\n\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    /** @type {?} */\n\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    /** @type {?} */\n\n    const manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n    if (isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n      this.open();\n    } else if (!this.multiple) {\n      /** @type {?} */\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      } // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n\n\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce(\n        /** @type {?} */\n        this.selected.viewValue);\n      }\n    }\n  }\n  /**\n   * Handles keyboard events when the selected is open.\n   * @private\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _handleOpenKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    /** @type {?} */\n\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    /** @type {?} */\n\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n      event.preventDefault();\n\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      /** @type {?} */\n\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      /** @type {?} */\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   * @return {?}\n   */\n\n\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   * @return {?}\n   */\n\n\n  _onAttached() {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n\n      this._changeDetectorRef.detectChanges();\n\n      this._calculateOverlayOffsetX();\n\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n  /**\n   * Returns the theme to be used on the panel.\n   * @return {?}\n   */\n\n\n  _getPanelTheme() {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  } // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n\n  /**\n   * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n   * @private\n   * @return {?}\n   */\n\n\n  _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      /** @type {?} */\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n  /**\n   * Whether the select has a value.\n   * @return {?}\n   */\n\n\n  get empty() {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   * @private\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _setSelectionByValue(value) {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n\n      value.forEach(currentValue => this._selectValue(currentValue));\n\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      /** @type {?} */\n\n\n      const correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n\n\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Finds and selects and option based on its value.\n   * @private\n   * @param {?} value\n   * @return {?} Option that has the corresponding value.\n   */\n\n\n  _selectValue(value) {\n    /** @type {?} */\n    const correspondingOption = this.options.find(option => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n  /**\n   * Sets up a key manager to listen to keyboard events on the overlay panel.\n   * @private\n   * @return {?}\n   */\n\n\n  _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead().withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n  /**\n   * Drops current option subscriptions and IDs and resets from scratch.\n   * @private\n   * @return {?}\n   */\n\n\n  _resetOptions() {\n    /** @type {?} */\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    }); // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n\n    merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    });\n\n    this._setOptionIds();\n  }\n  /**\n   * Invoked when an option is clicked.\n   * @private\n   * @param {?} option\n   * @param {?} isUserInput\n   * @return {?}\n   */\n\n\n  _onSelect(option, isUserInput) {\n    /** @type {?} */\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n\n      this._selectionModel.clear();\n\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the selected values in the selected based on their order in the panel.\n   * @private\n   * @return {?}\n   */\n\n\n  _sortValues() {\n    if (this.multiple) {\n      /** @type {?} */\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n      });\n\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Emits change event to set the model value.\n   * @private\n   * @param {?=} fallbackValue\n   * @return {?}\n   */\n\n\n  _propagateChanges(fallbackValue) {\n    /** @type {?} */\n    let valueToEmit = null;\n\n    if (this.multiple) {\n      valueToEmit =\n      /** @type {?} */\n      this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ?\n      /** @type {?} */\n      this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n\n    this._onChange(valueToEmit);\n\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Records option IDs to pass to the aria-owns property.\n   * @private\n   * @return {?}\n   */\n\n\n  _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   * @private\n   * @return {?}\n   */\n\n\n  _highlightCorrectOption() {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n  /**\n   * Scrolls the active option into view.\n   * @private\n   * @return {?}\n   */\n\n\n  _scrollActiveOptionIntoView() {\n    /** @type {?} */\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    /** @type {?} */\n\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n  }\n  /**\n   * Focuses the select element.\n   * @return {?}\n   */\n\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n  /**\n   * Gets the index of the provided option in the option list.\n   * @private\n   * @param {?} option\n   * @return {?}\n   */\n\n\n  _getOptionIndex(option) {\n    return this.options.reduce((result, current, index) => {\n      return result === undefined ? option === current ? index : undefined : result;\n    }, undefined);\n  }\n  /**\n   * Calculates the scroll position and x- and y-offsets of the overlay panel.\n   * @private\n   * @return {?}\n   */\n\n\n  _calculateOverlayPosition() {\n    /** @type {?} */\n    const itemHeight = this._getItemHeight();\n    /** @type {?} */\n\n\n    const items = this._getItemCount();\n    /** @type {?} */\n\n\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    /** @type {?} */\n\n    const scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n    /** @type {?} */\n\n    const maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n    /** @type {?} */\n\n    let selectedOptionOffset = this.empty ? 0 :\n    /** @type {?} */\n    this._getOptionIndex(this._selectionModel.selected[0]);\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n\n    /** @type {?} */\n\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   * @param {?} selectedIndex\n   * @param {?} scrollBuffer\n   * @param {?} maxScroll\n   * @return {?}\n   */\n\n\n  _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n    /** @type {?} */\n    const itemHeight = this._getItemHeight();\n    /** @type {?} */\n\n\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    /** @type {?} */\n\n    const halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n\n    /** @type {?} */\n\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n  /**\n   * Returns the aria-label of the select component.\n   * @return {?}\n   */\n\n\n  _getAriaLabel() {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n  /**\n   * Returns the aria-labelledby of the select component.\n   * @return {?}\n   */\n\n\n  _getAriaLabelledby() {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    } // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n\n\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n  /**\n   * Determines the `aria-activedescendant` to be set on the host.\n   * @return {?}\n   */\n\n\n  _getAriaActiveDescendant() {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   * @private\n   * @return {?}\n   */\n\n\n  _calculateOverlayOffsetX() {\n    /** @type {?} */\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    /** @type {?} */\n\n    const viewportSize = this._viewportRuler.getViewportSize();\n    /** @type {?} */\n\n\n    const isRtl = this._isRtl();\n    /** @type {?} */\n\n\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n    /** @type {?} */\n\n    let offsetX; // Adjust the offset, depending on the option padding.\n\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      /** @type {?} */\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    } // Invert the offset in LTR.\n\n\n    if (!isRtl) {\n      offsetX *= -1;\n    } // Determine how much the select overflows on each side.\n\n    /** @type {?} */\n\n\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    /** @type {?} */\n\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n\n\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   * @private\n   * @param {?} selectedIndex\n   * @param {?} scrollBuffer\n   * @param {?} maxScroll\n   * @return {?}\n   */\n\n\n  _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n    /** @type {?} */\n    const itemHeight = this._getItemHeight();\n    /** @type {?} */\n\n\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    /** @type {?} */\n\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    /** @type {?} */\n\n    let optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      /** @type {?} */\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      /** @type {?} */\n\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n\n      /** @type {?} */\n\n      let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    } // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n\n\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   * @private\n   * @param {?} maxScroll\n   * @return {?}\n   */\n\n\n  _checkOverlayWithinViewport(maxScroll) {\n    /** @type {?} */\n    const itemHeight = this._getItemHeight();\n    /** @type {?} */\n\n\n    const viewportSize = this._viewportRuler.getViewportSize();\n    /** @type {?} */\n\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    /** @type {?} */\n\n    const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n    /** @type {?} */\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    /** @type {?} */\n\n    const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    /** @type {?} */\n\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n      this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n  /**\n   * Adjusts the overlay panel up to fit in the viewport.\n   * @private\n   * @param {?} panelHeightBottom\n   * @param {?} bottomSpaceAvailable\n   * @return {?}\n   */\n\n\n  _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n\n    /** @type {?} */\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n  /**\n   * Adjusts the overlay panel down to fit in the viewport.\n   * @private\n   * @param {?} panelHeightTop\n   * @param {?} topSpaceAvailable\n   * @param {?} maxScroll\n   * @return {?}\n   */\n\n\n  _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n\n    /** @type {?} */\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n  /**\n   * Sets the transform origin point based on the selected option.\n   * @private\n   * @return {?}\n   */\n\n\n  _getOriginBasedOnOption() {\n    /** @type {?} */\n    const itemHeight = this._getItemHeight();\n    /** @type {?} */\n\n\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    /** @type {?} */\n\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n  /**\n   * Calculates the amount of items in the select. This includes options and group labels.\n   * @private\n   * @return {?}\n   */\n\n\n  _getItemCount() {\n    return this.options.length + this.optionGroups.length;\n  }\n  /**\n   * Calculates the height of the select's options.\n   * @private\n   * @return {?}\n   */\n\n\n  _getItemHeight() {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @param {?} ids\n   * @return {?}\n   */\n\n\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  get shouldLabelFloat() {\n    return this._panelOpen || !this.empty;\n  }\n\n}\n\nMatSelect.ɵfac = function MatSelect_Factory(t) {\n  return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LiveAnnouncer));\n};\n\nMatSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  viewQuery: function MatSelect_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n      ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"],\n  hostVars: 19,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    id: \"id\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    panelClass: \"panelClass\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    sortComparator: \"sortComparator\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c3,\n  decls: 9,\n  vars: 9,\n  consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n      ɵngcc0.ɵɵelement(7, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd()();\n      ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 10, \"ng-template\", 7);\n      ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n        return ctx.close();\n      });\n    }\n\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  dependencies: [ɵngcc7.NgClass, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.CdkConnectedOverlay, ɵngcc8.CdkOverlayOrigin],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSelect.ctorParameters = () => [{\n  type: ViewportRuler\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: NgZone\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Self\n  }, {\n    type: Optional\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SELECT_SCROLL_STRATEGY]\n  }]\n}, {\n  type: LiveAnnouncer\n}];\n\nMatSelect.propDecorators = {\n  trigger: [{\n    type: ViewChild,\n    args: ['trigger']\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  overlayDir: [{\n    type: ViewChild,\n    args: [CdkConnectedOverlay]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MatOptgroup]\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  customTrigger: [{\n    type: ContentChild,\n    args: [MatSelectTrigger]\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disableOptionCentering: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  sortComparator: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\",\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'listbox',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-label]': '_getAriaLabel()',\n        '[attr.aria-labelledby]': '_getAriaLabelledby()',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        '[class.mat-select-empty]': 'empty',\n        'class': 'mat-select',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }],\n      styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc5.MatFormField,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc6.LiveAnnouncer\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MatOptgroup]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MatSelectTrigger]\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass MatSelectModule {}\n\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\n\nMatSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n    declarations: function () {\n      return [MatSelect, MatSelectTrigger];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };","map":{"version":3,"names":["animate","animateChild","query","state","style","transition","trigger","ActiveDescendantKeyManager","LiveAnnouncer","Directionality","coerceBooleanProperty","SelectionModel","A","DOWN_ARROW","END","ENTER","HOME","LEFT_ARROW","RIGHT_ARROW","SPACE","UP_ARROW","hasModifierKey","CdkConnectedOverlay","Overlay","OverlayModule","ViewportRuler","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChild","ContentChildren","Directive","ElementRef","EventEmitter","Inject","InjectionToken","Input","isDevMode","NgZone","Optional","Output","Self","ViewChild","ViewEncapsulation","NgModule","FormGroupDirective","NgControl","NgForm","_countGroupLabelsBeforeOption","_getOptionScrollPosition","ErrorStateMatcher","MAT_OPTION_PARENT_COMPONENT","MatOptgroup","MatOption","mixinDisabled","mixinDisableRipple","mixinErrorState","mixinTabIndex","MatCommonModule","MatOptionModule","MatFormField","MatFormFieldControl","MatFormFieldModule","defer","merge","Subject","distinctUntilChanged","filter","map","startWith","switchMap","take","takeUntil","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","ɵngcc8","_c0","_c1","MatSelect_span_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","ɵɵprojection","MatSelect_span_5_Template","ɵɵtemplate","ctx_r3","ɵɵproperty","customTrigger","MatSelect_ng_template_8_Template","_r9","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ɵɵrestoreView","ctx_r8","ɵɵresetView","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵstyleProp","_transformOrigin","_triggerFontSize","panelClass","multiple","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","fadeInContent","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","constructor","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","ɵsetClassMetadata","args","selector","MatSelect","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","options","option","onSelectionChange","onStable","asObservable","pipe","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","id","focused","_placeholder","stateChanges","required","_selectionModel","disableOptionCentering","compareWith","fn","_initializeSelection","_value","newValue","writeValue","_id","ngOnInit","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","ngAfterContentInit","_initKeyManager","onChange","event","added","forEach","select","removed","deselect","changes","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","ngOnDestroy","complete","toggle","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","fontSize","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","altKey","preventDefault","selectedOption","setFirstItemActive","setLastItemActive","onKeydown","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","color","pseudoCheckbox","querySelector","offsetWidth","isEmpty","Promise","resolve","then","Array","isArray","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","focus","change","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","optionGroups","_getItemHeight","_getOptionIndex","reduce","result","current","index","itemHeight","items","_getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","max","_getAriaLabel","ariaLabelledby","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","shouldLabelFloat","MatSelect_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","MatSelect_Query","ɵɵviewQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","MatSelect_blur_HostBindingHandler","ɵɵattribute","toString","errorState","ɵɵclassProp","inputs","disableRipple","errorStateMatcher","outputs","exportAs","features","ɵɵProvidersFeature","useExisting","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","ɵɵelement","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","MatSelect_Template_ng_template_detach_8_listener","_r0","ɵɵreference","dependencies","NgClass","NgSwitch","NgSwitchCase","NgSwitchDefault","CdkOverlayOrigin","styles","encapsulation","data","animation","changeDetection","ctorParameters","decorators","String","propDecorators","descendants","None","OnPush","host","animations","providers","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/apple/Desktop/zepto/my_project/node_modules/@angular/material/__ivy_ngcc__/esm2015/select.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, animateChild, query, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/form-field';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState)); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r10._handleKeydown($event)); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     * @deprecated Not used anymore. To be removed.\n     * \\@breaking-change 8.0.0\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\nlet SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nclass MatSelectChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nclass MatSelectBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger'\n            }]\n    }], null, null); })();\nclass MatSelect extends _MatSelectMixinBase {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _ngZone\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _parentFormField\n     * @param {?} ngControl\n     * @param {?} tabIndex\n     * @param {?} scrollStrategyFactory\n     * @param {?=} _liveAnnouncer\n     */\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /**\n         * Unique id for this input.\n         */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = () => { };\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        this._onTouched = () => { };\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        this.optionSelectionChanges = defer(() => {\n            if (this.options) {\n                return merge(...this.options.map(option => option.onSelectionChange));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /**\n     * Whether the select is focused.\n     * @return {?}\n     */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    set focused(value) {\n        this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n    get placeholder() { return this._placeholder; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        });\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            /** @type {?} */\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClosedKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        /** @type {?} */\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        /** @type {?} */\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            /** @type {?} */\n            const selectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            // Since the value has changed, we need to announce it ourselves.\n            // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n            if (this._liveAnnouncer && selectedOption !== this.selected) {\n                this._liveAnnouncer.announce(((/** @type {?} */ (this.selected))).viewValue);\n            }\n        }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleOpenKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            /** @type {?} */\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            /** @type {?} */\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._setPseudoCheckboxPaddingSize();\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        });\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @private\n     * @return {?}\n     */\n    _setPseudoCheckboxPaddingSize() {\n        if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n            /** @type {?} */\n            const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n            if (pseudoCheckbox) {\n                SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n            }\n        }\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            /** @type {?} */\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this.options.find((option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.focus();\n            this.close();\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    _resetOptions() {\n        /** @type {?} */\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n        this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _onSelect(option, isUserInput) {\n        /** @type {?} */\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this.multiple) {\n            /** @type {?} */\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = ((/** @type {?} */ (this.selected))).map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? ((/** @type {?} */ (this.selected))).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    _setOptionIds() {\n        this._optionIds = this.options.map(option => option.id).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    _scrollActiveOptionIntoView() {\n        /** @type {?} */\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.reduce((result, current, index) => {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayPosition() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const items = this._getItemCount();\n        /** @type {?} */\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        /** @type {?} */\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        /** @type {?} */\n        let selectedOptionOffset = this.empty ? 0 : (/** @type {?} */ (this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /** @type {?} */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        /** @type {?} */\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        /** @type {?} */\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayOffsetX() {\n        /** @type {?} */\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        /** @type {?} */\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            /** @type {?} */\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        /** @type {?} */\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        /** @type {?} */\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        /** @type {?} */\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            /** @type {?} */\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            /** @type {?} */\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            /** @type {?} */\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const panelHeightTop = Math.abs(this._offsetY);\n        /** @type {?} */\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    _getOriginBasedOnOption() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LiveAnnouncer)); };\nMatSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatSelect_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"], hostVars: 19, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 9, vars: 9, consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 10, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, dependencies: [ɵngcc7.NgClass, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.CdkConnectedOverlay, ɵngcc8.CdkOverlayOrigin], styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\n/** @nocollapse */\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MatSelectTrigger,] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{ selector: 'mat-select', exportAs: 'matSelect', template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\", inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                }, animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ], providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ], styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"] }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc6.LiveAnnouncer }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup]\n        }], panelClass: [{\n            type: Input\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MatSelectTrigger]\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule, MatFormFieldModule, MatOptionModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}